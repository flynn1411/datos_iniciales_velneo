[
	{
		"tablaIdRef": "verp_3_dat/SCR_W",
		"indiceId": "ID",
		"indicePartes": [
			"ID"
		],
		"numRegistros": 39
	},
	{
		"datos": [
			{
				"ID": "ACT-DSC",
				"NAME": "Actualizar descripción",
				"SCR": "// -------------------------------------------------------------------------------\n// Actualizar la descripción del registro (multiregistro) en función de la fórmula\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n(function actualizarDescripcion()\n{\n    // Preparamos los valores iniciales\n    var descripcion = parametros.descripcion;\n    var numRegistro = registroFicReg.fieldToInt(\"NUM_REG\");\n\n    // Recorremos las etiquetas conformando la descripcion\n    for (numEtiqueta = 0; numEtiqueta < parametros.etiquetasDescripcion.length; numEtiqueta++)\n    {\n        var etiquetaTag   = parametros.etiquetasDescripcion[numEtiqueta].tag;\n        var etiquetaId    = parametros.etiquetasDescripcion[numEtiqueta].id;\n        var etiquetaFormato = parametros.etiquetasDescripcion[numEtiqueta].formato;\n        var etiquetaValor = getEtiqueta(ficId, etiquetaId + \"-\" + (\"000000\" + numRegistro).slice (-6));\n        if (etiquetaFormato != undefined)\n            etiquetaValor   = convertirFecha(etiquetaValor, etiquetaFormato); \n        descripcion       = descripcion.replace(etiquetaTag, etiquetaValor);\n    }\n\n    // Actualizamos la descripción en el registro\n    var nuevoRegistro = new VRegister(theRoot);\n    nuevoRegistro.setTable(\"verp_3_dat/FIC_REG_W\");\n    nuevoRegistro.readRegister(\"ID\", [registroFicReg.fieldToInt(\"ID\")], VRegister.SearchThis); \n    nuevoRegistro.setField(\"DSC_REG\", descripcion);\n    nuevoRegistro.modifyRegister();\n})();\n",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "ACT-DSC"
			},
			{
				"ID": "AEAT-FUN",
				"NAME": "AEAT. Funciones generales",
				"SCR": "// -------------------------------------------------------------------------------\n// Funciones generales de la AEAT\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-FUN"
			},
			{
				"ID": "AEAT-IMP-CSV",
				"NAME": "AEAT. Importar plantilla desde fichero CSV",
				"SCR": "// -----------------------------------------------------------------------------------------------------\n// Importación de registros ende la tabla PLF_W a partir los datos contenidos en un fichero ASCII\n//\n// 08-11-2016 - Revisión 20.0\n// -----------------------------------------------------------------------------------------------------\n\nimportClass(\"VDir\");\nimportClass(\"VFile\");\nimportClass(\"VTextFile\");\n\n\nvar senda = parametros[0];\nvar SEPARADOR = parametros[1];\nvar plf = parametros[2];\nvar plfpri = parametros[3]; \nvar emp = parametros[4]; \nvar ficname = parametros[5]; \n\n\n// Se carga el directorio y sus ficheros\nvar dir = new VDir();\ndir.cd(senda);\ndir.load();\n\n// Si no hay ficheros a importar en el directorio se devuelve un mensaje de aviso\nif (dir.count() == 0)\n{\n\t// Se retorna el mensaje con el resultado de la importación\n              alert(\"MENSAJE\", \"No se han encontrado ficheros a importar en \" + senda);\n};\n\n// Se recorren los ficheros del directorio\nvar numFicherosImportados = 0;\n\nfor (var numFichero = 0; numFichero < dir.count(); numFichero++)\n{\n    // Se lee el fichero del directorio y se prepara su nombre sin extensión\n    var fichero = dir.entryAt(numFichero);\n    var ficheroNombre = fichero.baseName();\n\n  \n    var registro = new VRegister(theRoot);\n    registro.setTable(\"verp_3_dat/PLF_W\")\n    if (ficheroNombre == ficname)\n    {\n\t\t// Se acumula el nº de ficheros importados\n\t\tnumFicherosImportados += 1;\n\t\t\n        // Se prepara el valor del separador de campos\n        var separador = (SEPARADOR != null) ? SEPARADOR : \"\\t\";\n        \n\n\n\n        \n        if (1 == 1)\n        {\n            // Se abre el fichero en modo de sólo lectura\n            var ficheroTxt = new VTextFile(fichero.filePath());\n        \n            if (ficheroTxt.open(VFile.OpenModeReadOnly))\n            {\n                // Se leen los nombres de los campos en la primera línea y se guardan en un array\n                var linea = ficheroTxt.readLine();\n                var aCampos = linea.split(separador);\n\n                // Recorremos el fichero línea a línea guardando su contenido\n                var aValores = new Array();\n                var nNumRegistro = 0;\n                theRoot.initProgressBar();\n                theRoot.setProgress(100);\n\n                while (ficheroTxt.atEnd() == false)\n                {\n                    // Leer la línea y los valores de los campos\n                    linea = ficheroTxt.readLine();\n                    aValores = linea.split(separador);\n                    for (var nCampo = 0; nCampo < aValores.length; nCampo++)\n                    {\n                        registro.setField(aCampos[nCampo], aValores[nCampo]);\n\n                    };\n\n                    registro.setField(\"PLF\", plf);\n                    registro.setField(\"PLF_PRI\", plfpri);\n                    registro.setField(\"EMP\", emp);\n                    registro.addRegister();\n\n                    // Mostrar el avance\n                    theRoot.setTitle(\"Importando registro nº \" + nNumRegistro++ + \" de la tabla \" + ficheroNombre);\n                };\n\n                // Se cierra el fichero\n                ficheroTxt.close();\n                theRoot.endProgressBar();\n            };\n\n\n\n\n        };\n    };\n\t\n\t// Se retorna el mensaje con el resultado de la importación\n\t alert(\"MENSAJE\", \"Se han importado correctamente \" + numFicherosImportados + \" ficheros.\");\n};\n",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-IMP-CSV"
			},
			{
				"ID": "AEAT-303-GEN-FIC",
				"NAME": "AEAT. Modelo 303. Generar fichero",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 303. Generar fichero\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n// Ejecutamos el cálculo de los totales\ncalcularFormulaTotales();\n\n// Generamos el fichero en formato TXT\ngenerarFicheroTxt();",
				"VER_ULT_ACT": "24.0",
				"OFF": false,
				"ID_SCR": "AEAT-303-GEN-FIC"
			},
			{
				"ID": "AEAT-303-H01",
				"NAME": "AEAT. Modelo 303. Cálculo de la hoja 01",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 303. Cálculo hoja 01\n//\n// 08-11-2016 - Revisión 20.0\n// 03-11-2018 - Revisión 23.1\n// 16-10-2019 - Revisión 26.0\n// 08-10-2020 - Revisión 28.0\n// 24-10-2022 - Revisión 32.0\n// -------------------------------------------------------------------------------\n\nif (registroFicReg)\n{\n  // Lanzamos búsqueda de IVA - FACTURAS EMTIDAS\n  // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n  var busqueda = new VQuery(theRoot);\n  busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n  busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n  busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n  busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n  busqueda.exec();\n  lista = busqueda.result();\n\n  if (lista.size())\n  {\n    // Inicializamos variables\n    var baseGen_01    = 0;\n    var baseRed_04    = 0;\n    var baseSup_07    = 0;\n    var baseReqGen_16 = 0;\n    var baseReqRed_19 = 0;\n    var baseReqSup_22 = 0;\n    var baseIntra_10  = 0;\n    var baseISP_12    = 0;\n    var baseModi_14   = 0;\n    var baseReqModi_25= 0;\n\n    var tipoGen_02    = 0;\n    var tipoRed_05    = 0;\n    var tipoSup_08    = 0;\n\n    var tipoReqGen_17 = 0;\n    var tipoReqRed_20 = 0;\n    var tipoReqSup_23 = 0;\n\n    var cuotaGen_03   = 0;\n    var cuotaRed_06   = 0;\n    var cuotaSup_09   = 0;\n    var cuotaIntra_11 = 0;\n    var cuotaISP_13   = 0;\n    var cuotaModi_15  = 0;\n\n    var reqGen_18     = 0;\n    var reqRed_21     = 0;\n    var reqSup_24     = 0;\n    var reqGen        = 0;\n    var reqRed        = 0;\n    var reqSup        = 0;\n    var reqModi_26    = 0;\n\n    // Leemos cada registro de factura EMITIDA\n    for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++)\n    {\n        var registro = lista.readAt(numRegistro);\n\n        //Se mira el registro de cada factura a qué tipo de libro de IVA Repercutido-Devengado corresponde\n        var tipoLibro = registro.fieldToString(\"SER.TIP_IVA_DEV\");\n\n        switch(tipoLibro)\n        {\n              case \"1\":\n                if (registro.fieldToDouble(\"BAS_TOT\") > 0)\n                {\n                //Regiment General + Recargo de Equivalencia\n                  baseGen_01      += registro.fieldToDouble(\"BAS_GEN\");\n                  baseRed_04      += registro.fieldToDouble(\"BAS_RED\");\n                  baseSup_07      += registro.fieldToDouble(\"BAS_SUP\");\n                  cuotaGen_03     += registro.fieldToDouble(\"IVA_GEN\");\n                  cuotaRed_06     += registro.fieldToDouble(\"IVA_RED\");\n                  cuotaSup_09     += registro.fieldToDouble(\"IVA_SUP\");\n                  reqGen          =  registro.fieldToDouble(\"REQ_GEN\");\n                  reqRed          =  registro.fieldToDouble(\"REQ_RED\");\n                  reqSup          =  registro.fieldToDouble(\"REQ_SUP\");\n                  if (reqGen != 0) { baseReqGen_16 += registro.fieldToDouble(\"BAS_GEN\") };\n                  if (reqRed != 0) { baseReqRed_19 += registro.fieldToDouble(\"BAS_RED\") };\n                  if (reqSup != 0) { baseReqSup_22 += registro.fieldToDouble(\"BAS_SUP\") };\n                  reqGen_18       += reqGen;\n                  reqRed_21       += reqRed;\n                  reqSup_24       += reqSup;\n                }\n                if (registro.fieldToDouble(\"BAS_TOT\") < 0)\n                {\n                //Regimen General Modificaciones de bases y cuotas\n                  baseModi_14     += (registro.fieldToDouble(\"BAS_TOT\"));\n                  cuotaModi_15    += (registro.fieldToDouble(\"IVA_TOT\"));\n\n                //Regimen General Modificaciones de bases y cuotas Recargo Equivalencia\n                baseReqModi_25  += (registro.fieldToBool(\"CON_REQ\") == true )?(registro.fieldToDouble(\"BAS_TOT\")):0;\n                reqModi_26      += (registro.fieldToDouble(\"REQ_TOT\"));\n                }\n                break;\n              case \"3\":\n                //Adquisiciones intracomunitarias de bienes y servicios\n                if (registro.fieldToDouble(\"BAS_TOT\") > 0)\n                {\n                baseIntra_10  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n                cuotaIntra_11 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n                }; \n                if (registro.fieldToDouble(\"BAS_TOT\") < 0)\n                {\n                //IVA Deducible - Rectificación de deducciones\n                baseModi_14  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n                cuotaModi_15 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n                }\n                break;\n              case \"6\":\n                //Op. no sujetas o con inv. sujeto pasivo con derecho a deducción\n                baseISP_12    += (registro.fieldToDouble(\"BAS_TOT\"));\n                cuotaISP_13   += (registro.fieldToDouble(\"IVA_TOT\"));\n                break;\n        }\n    }\n\n    // Una vez leídas todas las facturas emitidas rellenamos en cada casilla del modelo\n\n    // Tomamos los porcentajes de IVA y Recargo Equivalencia parametrizados en la empresa\n    tipoGen_02      =  registro.fieldToDouble(\"EMP.POR_IVA_GEN\");\n    tipoRed_05      =  registro.fieldToDouble(\"EMP.POR_IVA_RED\");\n    tipoSup_08      =  registro.fieldToDouble(\"EMP.POR_IVA_SUP\");\n    tipoReqGen_17   =  registro.fieldToDouble(\"EMP.POR_REQ_GEN\");\n    tipoReqRed_20   =  registro.fieldToDouble(\"EMP.POR_REQ_RED\");\n    tipoReqSup_23   =  registro.fieldToDouble(\"EMP.POR_REQ_SUP\");\n\n    // Modificar registro de la HOJA 01 a partir de las etiquetas definidas en sus campos en la plantilla\n    // El registro de la HOJA 01 ya nos viene de origen\n    // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n    \n    if (cuotaGen_03 != 0)\n    {\n        setEtiqueta(ficId, \"303-001\", baseGen_01);\n        setEtiqueta(ficId, \"303-002\", tipoGen_02);\n        setEtiqueta(ficId, \"303-003\", cuotaGen_03);\n    }\n\n    if (cuotaRed_06 != 0)\n    {\n        setEtiqueta(ficId, \"303-004\", baseRed_04);\n        setEtiqueta(ficId, \"303-005\", tipoRed_05);\n        setEtiqueta(ficId, \"303-006\", cuotaRed_06);\n    }\n\n    if (cuotaSup_09 != 0)\n    {\n        setEtiqueta(ficId, \"303-007\", baseSup_07);\n        setEtiqueta(ficId, \"303-008\", tipoSup_08);\n        setEtiqueta(ficId, \"303-009\", cuotaSup_09);\n    }\n\n    if (cuotaIntra_11 != 0)\n    {\n        setEtiqueta(ficId, \"303-010\", baseIntra_10);\n        setEtiqueta(ficId, \"303-011\", cuotaIntra_11);\n    }\n\n    if (cuotaISP_13 != 0)\n    {\n        setEtiqueta(ficId, \"303-012\", baseISP_12);\n        setEtiqueta(ficId, \"303-013\", cuotaISP_13);\n    }\n\n    if (cuotaModi_15 != 0)\n    {\n        setEtiqueta(ficId, \"303-014\", baseModi_14);\n        setEtiqueta(ficId, \"303-015\", cuotaModi_15);\n    }\n\n    if (reqGen_18 != 0)\n    {\n        setEtiqueta(ficId, \"303-016\", baseReqGen_16);\n        setEtiqueta(ficId, \"303-017\", tipoReqGen_17);\n        setEtiqueta(ficId, \"303-018\", reqGen_18);\n    }\n\n    if (reqRed_21 != 0)\n    {\n        setEtiqueta(ficId, \"303-019\", baseReqRed_19);\n        setEtiqueta(ficId, \"303-020\", tipoReqRed_20);\n        setEtiqueta(ficId, \"303-021\", reqRed_21);\n    }\n\n    if (reqSup_24 != 0)\n    {\n        setEtiqueta(ficId, \"303-022\", baseReqSup_22);\n        setEtiqueta(ficId, \"303-023\", tipoReqSup_23);\n        setEtiqueta(ficId, \"303-024\", reqSup_24);\n    }\n\n    if ( reqModi_26 != 0 )\n    {\n        setEtiqueta(ficId, \"303-025\", baseReqModi_25);\n        setEtiqueta(ficId, \"303-026\", reqModi_26);\n    }\n\n    setEtiqueta(ficId, \"303-027\", (cuotaGen_03 + cuotaRed_06 + cuotaSup_09 + cuotaIntra_11 + cuotaISP_13 + cuotaModi_15 + reqGen_18 + reqRed_21 + reqSup_24 + reqModi_26));\n  } \n\n  // Lanzamos búsqueda de IVA - FACTURAS RECIBIDAS\n  // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n  busqueda = new VQuery(theRoot);\n  busqueda.setQuery(\"verp_3_dat/FAC_REC_C_SER_ENT_FCH\");\n  busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n  busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n  busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n  busqueda.exec();\n  lista = busqueda.result();\n\n  if (lista.size())\n  {\n  // Inicializamos variables\n    var baseSop_28    = 0;\n    var baseSop_30    = 0;\n    var baseSop_32    = 0;\n    var baseSop_34    = 0;\n    var baseSop_36    = 0;\n    var baseSop_38    = 0;\n    var baseModi_40   = 0;\n\n    var cuotaSop_29   = 0;\n    var cuotaSop_31   = 0;\n    var cuotaSop_33   = 0;\n    var cuotaSop_35   = 0;\n    var cuotaSop_37   = 0;\n    var cuotaSop_39   = 0;\n    var cuotaModi_41  = 0;\n    var cuotaSop_42   = 0;\n    var cuotaSop_43   = 0;\n\n    // Leemos cada registro de factura RECIBIDA\n    for (numRegistro = 0; numRegistro < lista.size(); numRegistro++)\n    {\n      registro = lista.readAt(numRegistro);\n\n      //Se mira el registro de cada factura a qué tipo de libro de IVA Soportado-Deducible corresponde\n      tipoLibro = registro.fieldToString(\"SER.TIP_IVA_DED\");\n\n      switch(tipoLibro)\n      {\n        case \"-\":\n          //No se declara\n          break;\n        case \"1\":\n          if (registro.fieldToDouble(\"BAS_TOT\") > 0)\n          {\n            //Operaciones interiores corrientes\n            baseSop_28  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n            cuotaSop_29 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          }\n          if (registro.fieldToDouble(\"BAS_TOT\") < 0)\n          {\n            //IVA Deducible - Rectificación de deducciones\n            baseModi_40  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n            cuotaModi_41 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          }\n          break;\n        case \"2\":\n          //Importaciones bienes corrientes\n          baseSop_32  += registro.fieldToDouble(\"BAS_TOT\");\n          cuotaSop_33 += registro.fieldToDouble(\"IVA_TOT\");\n          break;\n        case \"3\":\n          //Adquisiciones intracomunitarias bienes y servicios corrientes\n          baseSop_36  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n          cuotaSop_37 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          break;\n        case \"4\":\n          //Compensaciones Regimen Especial A.G. y P\n          cuotaSop_42 += registro.fieldToDouble(\"IVA_TOT\");\n          break;\n        case \"5\":\n          //Regularización bienes inversión\n          cuotaSop_43 += registro.fieldToDouble(\"IVA_TOT\");\n          break;\n        case \"6\":\n          //Operaciones interiores bienes inversión\n          baseSop_30  += registro.fieldToDouble(\"BAS_TOT\");\n          cuotaSop_31 += registro.fieldToDouble(\"IVA_TOT\");\n          break;\n        case \"7\":\n          //Importaciones bienes inversión\n          baseSop_34  += registro.fieldToDouble(\"BAS_TOT\");\n          cuotaSop_35 += registro.fieldToDouble(\"IVA_TOT\");\n          break;\n        case \"8\":\n          //Adquisiciones intracomunitarias bienes inversión\n          baseSop_38  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n          cuotaSop_39 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          break;\n        case \"9\":\n          //Adquisiciones intracomunitarias bienes y servicios corrientes\n          if (registro.fieldToDouble(\"BAS_TOT\") > 0)\n          {\n            baseSop_36  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n            cuotaSop_37 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          }\n          if (registro.fieldToDouble(\"BAS_TOT\") < 0)\n          {\n            //IVA Deducible - Rectificación de deducciones\n            baseModi_40  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n            cuotaModi_41 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          }\n          break;\n        case \"A\":\n          if (registro.fieldToDouble(\"BAS_TOT\") > 0)\n          {\n          //Operaciones interiores corrientes\n          baseSop_28  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n          cuotaSop_29 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          } \n          if (registro.fieldToDouble(\"BAS_TOT\") < 0)\n          {\n          //IVA Deducible - Rectificación de deducciones\n          baseModi_40  += (registro.fieldToDouble(\"BAS_GEN\") + registro.fieldToDouble(\"BAS_RED\") + registro.fieldToDouble(\"BAS_SUP\"));\n          cuotaModi_41 += (registro.fieldToDouble(\"IVA_GEN\") + registro.fieldToDouble(\"IVA_RED\") + registro.fieldToDouble(\"IVA_SUP\"));\n          }\n          break;\n      }\n    }\n\n    // Modificar registro de la HOJA 01 a partir de las etiquetas definidas en sus campos en la plantilla\n    // El registro de la HOJA 01 ya nos viene de origen\n    // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n  \n    if (cuotaSop_29 != 0)\n    {\n      setEtiqueta(ficId, \"303-028\", baseSop_28);\n      setEtiqueta(ficId, \"303-029\", cuotaSop_29);\n    }\n\n    if (cuotaSop_31 != 0)\n    {\n      setEtiqueta(ficId, \"303-030\", baseSop_30);\n      setEtiqueta(ficId, \"303-031\", cuotaSop_31);\n    }\n\n    if (cuotaSop_33 != 0)\n    {\n      setEtiqueta(ficId, \"303-032\", baseSop_32);\n      setEtiqueta(ficId, \"303-033\", cuotaSop_33);\n    }\n\n    if (cuotaSop_35 != 0)\n    {\n      setEtiqueta(ficId, \"303-034\", baseSop_34);\n      setEtiqueta(ficId, \"303-035\", cuotaSop_35);\n    }\n\n    if (cuotaSop_37 != 0)\n    {\n      setEtiqueta(ficId, \"303-036\", baseSop_36);\n      setEtiqueta(ficId, \"303-037\", cuotaSop_37);\n    }\n\n    if (cuotaSop_39 != 0)\n    {\n      setEtiqueta(ficId, \"303-038\", baseSop_38);\n      setEtiqueta(ficId, \"303-039\", cuotaSop_39);\n    }\n\n    if (cuotaModi_41 != 0)\n    {\n      setEtiqueta(ficId, \"303-040\", baseModi_40);\n      setEtiqueta(ficId, \"303-041\", cuotaModi_41);\n    }\n\n    setEtiqueta(ficId, \"303-042\", cuotaSop_42);\n    setEtiqueta(ficId, \"303-043\", cuotaSop_43);\n    setEtiqueta(ficId, \"303-045\", (cuotaSop_29 + cuotaSop_31 + cuotaSop_33 + cuotaSop_35 + cuotaSop_37 + cuotaSop_39 + cuotaModi_41 + cuotaSop_42 + cuotaSop_43));\t\n  }\n\n  //RESULTADO REGIMEN GENERAL\n  setEtiqueta(ficId, \"303-046\", (cuotaGen_03 + cuotaRed_06 + cuotaSup_09 + cuotaIntra_11 + cuotaISP_13 + cuotaModi_15 + reqGen_18 + reqRed_21 + reqSup_24 + reqModi_26) - (cuotaSop_29 + cuotaSop_31 + cuotaSop_33 + cuotaSop_35 + cuotaSop_37 + cuotaSop_39 + cuotaModi_41 + cuotaSop_42 + cuotaSop_43));\n}",
				"VER_ULT_ACT": "32.0",
				"OFF": false,
				"ID_SCR": "AEAT-303-H01"
			},
			{
				"ID": "AEAT-303-H03",
				"NAME": "AEAT. Modelo 303. Cálculo de la hoja 03",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 303. Cálculo hoja 03\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n     // Lanzamos búsqueda de IVA - FACTURAS EMTIDAS\n     // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n     var busqueda = new VQuery(theRoot);\n     busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n     busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n     busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n     busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n     busqueda.exec();\n     lista = busqueda.result();\n\n     // Inicializamos variables\n     \n     var baseExe_59    = 0;\n     var baseExe_60    = 0;\n     var baseExe_61    = 0;\n     \n     // Leemos cada registro de factura EMITIDA\n     for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++) {\n          var registro = lista.readAt(numRegistro);\n\n          //Se mira el registro de cada factura a qué tipo de libro de IVA Repercutido-Devengado corresponde\n          var tipoLibro = registro.fieldToString(\"SER.TIP_IVA_DEV\");\n\n          switch(tipoLibro) {\n               case \"4\":\n                    //Entregas intracomunitarias de bienes y servicios\n                    baseExe_59      += registro.fieldToDouble(\"BAS_EXE\");\n                    break;\n               case \"5\":\n                    //Exportaciones y operaciones asimiladas\n                    baseExe_60      += registro.fieldToDouble(\"BAS_EXE\");\n                    break;\n               case \"6\":\n                    //Operaciones no sujetas o con inversión del sujeto pasivo que originan el derecho a deducción\n                    baseExe_61      += registro.fieldToDouble(\"BAS_EXE\");\n                    break;\n          };\n     };\n\n    // Una vez leídas todas las facturas emitidas rellenamos en cada casilla del modelo\n         \n    // Modificar registro de la HOJA 03 a partir de las etiquetas definidas en sus campos en la plantilla\n    // El registro de la HOJA 03 ya nos viene de origen\n    // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n\n    setEtiqueta(ficId, \"303-059\", baseExe_59);\n    setEtiqueta(ficId, \"303-060\", baseExe_60);\n    setEtiqueta(ficId, \"303-061\", baseExe_61);\n\n    // En ésta versión de script del modelo 303 sólo contemplamos Regimen General (descartamos Regimen Simplificado y regularización de cuotas según art.80.5.5ª LIVA)\n    // Es decir, el script es para los casos más comunes. No obstante para casos más particulares y específicos es tan sencillo como ajustar el script, sin necesidad de tocar vDevelop\n    // Casilla 46 Resultado Regimen General\n    var rdoRegGral = 0;\n    rdoRegGral     = getEtiqueta(ficId, \"303-046\");\n    setEtiqueta(ficId, \"303-064\", rdoRegGral);\n    // Por defecto asumimos el 100% atribuible a la Administración del Estado. Si se tiene que ajustar es tan sencillo como canviar el valor en el script y en la plantilla del 303\n    setEtiqueta(ficId, \"303-066\", rdoRegGral);\n\n    var cuotasCompensar = 0;\n    cuotasCompensar     = getEtiqueta(ficId, \"303-067\");\n    setEtiqueta(ficId, \"303-069\", rdoRegGral - cuotasCompensar);\n    setEtiqueta(ficId, \"303-071\", rdoRegGral - cuotasCompensar);\n};",
				"VER_ULT_ACT": "24.0",
				"OFF": false,
				"ID_SCR": "AEAT-303-H03"
			},
			{
				"ID": "AEAT-340-GEN-FIC",
				"NAME": "AEAT. Modelo 340. Generar fichero",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 340. Generar fichero\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n// Ejecutamos el cálculo de los totales\ncalcularFormulaTotales();\n\n// Generamos el fichero en formato TXT\ngenerarFicheroTxt();\n",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-340-GEN-FIC"
			},
			{
				"ID": "AEAT-340-DET-EXP",
				"NAME": "AEAT. Modelo 340. Detalle Facturas Expedidas",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 340. Detalle facturas expedidas\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n     // Lanzamos búsqueda de IVA - FACTURAS EMTIDAS\n     // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n     var busqueda = new VQuery(theRoot);\n     busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n     busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n     busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n     busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n     busqueda.exec();\n     lista = busqueda.result();\n     lista.sort(\"SER\", \"NUM_REG_IVA\");\n\n     // Leemos cada registro de factura\n     for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++) {\n          var registro = lista.readAt(numRegistro);\n          var locCif   = \"\";\n          // Dato importante el CIF\n          var cif      = registro.fieldToString(\"CIF\");\n          var cifLtr   = cif.substring(0, 2);\n          cifLtr       = cifLtr.toUpperCase();\n          // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n          switch(cifLtr) {\n               case \"AT\":\n               case \"BE\":\n               case \"BG\":\n               case \"CY\":\n               case \"CZ\":\n               case \"DE\":\n               case \"DK\":\n               case \"EE\":\n               case \"EL\":\n               case \"FI\":\n               case \"FR\":\n               case \"GB\":\n               case \"HR\":\n               case \"HU\":\n               case \"IE\":\n               case \"IT\":\n               case \"LT\":\n               case \"LU\":\n               case \"LV\":\n               case \"MT\":\n               case \"NL\":\n               case \"PL\":\n               case \"PT\":\n               case \"RO\":\n               case \"SE\":\n               case \"SI\":\n               case \"SK\":\n                    locCif = \"C\";\n                    break;\n          };\n          // Otro dato importante es el Código Postal\n          var cp      = registro.fieldToString(\"CPS\");\n          var codPrv  = \"\";\n          if (cp != \"\") {\n               codPrv = cp.substring(0, 2);\n          } else {\n               cp     = registro.fieldToString(\"AUX.CPS\");\n               codPrv = cp.substring(0, 2);\n          };\n\n          // Verificamos de qué tipo de CIF se trata\n          // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n          if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n          else if (locCif == \"C\")                                                         locCif = \"C\";\n          else                                                                            locCif = \"X\";\n\n          // Inicializamos variables\n          var numBimp = 0;\n          var baseGen = registro.fieldToDouble(\"BAS_GEN\");\n          var baseRed = registro.fieldToDouble(\"BAS_RED\");\n          var baseSup = registro.fieldToDouble(\"BAS_SUP\");\n          var baseEsp = registro.fieldToDouble(\"BAS_ESP\");\n          var baseExe = registro.fieldToDouble(\"BAS_EXE\");\n\n          if (baseGen != 0) {\n               numBimp++;\n               var tipoGen     = registro.fieldToDouble(\"POR_IVA_GEN\");\n               var cuotaGen    = registro.fieldToDouble(\"IVA_GEN\");\n               var tipoReqGen  = registro.fieldToDouble(\"POR_REQ_GEN\");\n               var reqGen      = registro.fieldToDouble(\"REQ_GEN\");\n               var totalGen    = baseGen + cuotaGen + reqGen;\n          };\n\n          if (baseRed != 0) {\n               numBimp++;\n               var tipoRed     = registro.fieldToDouble(\"POR_IVA_RED\");\n               var cuotaRed    = registro.fieldToDouble(\"IVA_RED\");\n               var tipoReqRed  = registro.fieldToDouble(\"POR_REQ_RED\");\n               var reqRed      = registro.fieldToDouble(\"REQ_RED\");\n               var totalRed    = baseRed + cuotaRed + reqRed;\n          };\n\n          if (baseSup != 0) {\n               numBimp++;\n               var tipoSup     = registro.fieldToDouble(\"POR_IVA_SUP\");\n               var cuotaSup    = registro.fieldToDouble(\"IVA_SUP\");\n               var tipoReqSup  = registro.fieldToDouble(\"POR_REQ_SUP\");\n               var reqSup      = registro.fieldToDouble(\"REQ_SUP\");\n               var totalSup    = baseSup + cuotaSup + reqSup;\n          };\n\n          if (baseEsp != 0) {\n               numBimp++;\n               var tipoEsp     = registro.fieldToDouble(\"POR_IVA_ESP\");\n               var cuotaEsp    = registro.fieldToDouble(\"IVA_ESP\");\n               var tipoReqEsp  = registro.fieldToDouble(\"POR_REQ_ESP\");\n               var reqEsp      = registro.fieldToDouble(\"REQ_ESP\");\n               var totalEsp    = baseEsp + cuotaEsp + reqEsp;\n          };\n\n          if (baseExe != 0) {\n               numBimp++;\n               var tipoExe     = 0;\n               var cuotaExe    = 0;\n               var tipoReqExe  = 0;\n               var reqExe      = 0;\n               var totalExe    = baseExe + cuotaExe + reqExe;\n          };\n\n          if (numBimp > 1) {\n               // Si hay más de una Base imponible afecta a la Clave de la Operación\n               // Ver dieño registro lógico AEAT 340 para consultar el resto de opciones en cuanto a la Clave de la Operación\n               // C --> Factura con varios tipos impositivos\n               var clvOpe      = \"C\";\n               var numRegsDesg = numBimp;\n          } else {\n               // En otro caso, quedaría a definir en función de la tipologías de registros de IVA\n               // Por defecto se asume que no hay ninguno de los otros casos por los que se define la Clave de la Operación\n               // Ver dieño registro lógico AEAT 340 para consultar el resto de opciones en cuanto a la Clave de la Operación\n               var clvOpe = \"\";\n               var numRegsDesg = 1;\n          };\n\n          var nombre      = registro.fieldToString(\"RAZ_SOC\");\n          var codPaiRes   = registro.fieldToString(\"AUX.PAI.ISO_2\");\n          var idFra       = registro.fieldToString(\"NUM_DOC\");\n          var numRegIva   = registro.fieldToString(\"NUM_REG_IVA\");\n          // Por defecto se asume que el número de facturas en el registro es 1 (no se está contemplando un resumen de facturas o tiques acumulados)\n          var numFras     = 1;\n          var fchCon      = new Date(registro.fieldToDate(\"FCH_CON\"));\n          fchCon          = convertirFecha(fchCon, \"aaaa/mm/dd\");\n          var fchFac      = new Date(registro.fieldToDate(\"FCH_FAC\"));\n          fchFac          = convertirFecha(fchFac, \"aaaa/mm/dd\");\n          if (fchFac != \"\") {\n               var fchExp = fchFac;\n               var fchOpe = fchFac;\n          } else {\n               var fchExp = fchCon;\n               var fchOpe = fchCon;\n          };\n\n          \n          // Crear registro DETALLE y sus campos en el fichero\n          // Por cada Base imponible hay que generar un registro de DETALLE en el 340\n          if (baseGen != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoGen);\n               setEtiqueta(ficId, \"BAS-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), baseGen);\n               setEtiqueta(ficId, \"CUO-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaGen);\n               setEtiqueta(ficId, \"FRA-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), totalGen);\n               setEtiqueta(ficId, \"IDE-FRA-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-EXP-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n               setEtiqueta(ficId, \"TIP-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoReqGen);\n               setEtiqueta(ficId, \"CUO-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), reqGen);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n          \n          if (baseRed != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoRed);\n               setEtiqueta(ficId, \"BAS-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), baseRed);\n               setEtiqueta(ficId, \"CUO-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaRed);\n               setEtiqueta(ficId, \"FRA-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), totalRed);\n               setEtiqueta(ficId, \"IDE-FRA-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-EXP-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n               setEtiqueta(ficId, \"TIP-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoReqRed);\n               setEtiqueta(ficId, \"CUO-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), reqRed);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n          \n          if (baseSup != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoSup);\n               setEtiqueta(ficId, \"BAS-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), baseSup);\n               setEtiqueta(ficId, \"CUO-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaSup);\n               setEtiqueta(ficId, \"FRA-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), totalSup);\n               setEtiqueta(ficId, \"IDE-FRA-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-EXP-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n               setEtiqueta(ficId, \"TIP-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoReqSup);\n               setEtiqueta(ficId, \"CUO-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), reqSup);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n\n          if (baseEsp != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoEsp);\n               setEtiqueta(ficId, \"BAS-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), baseEsp);\n               setEtiqueta(ficId, \"CUO-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaEsp);\n               setEtiqueta(ficId, \"FRA-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), totalEsp);\n               setEtiqueta(ficId, \"IDE-FRA-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-EXP-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n               setEtiqueta(ficId, \"TIP-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoReqEsp);\n               setEtiqueta(ficId, \"CUO-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), reqEsp);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n\n          if (baseExe != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-EXP-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-EXP-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoExe);\n               setEtiqueta(ficId, \"BAS-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), baseExe);\n               setEtiqueta(ficId, \"CUO-IMP-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaExe);\n               setEtiqueta(ficId, \"FRA-OPE-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), totalExe);\n               setEtiqueta(ficId, \"IDE-FRA-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-EXP-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n               setEtiqueta(ficId, \"TIP-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoReqExe);\n               setEtiqueta(ficId, \"CUO-REQ-EXP-\"          + (\"000000\" + numRegistroFic).slice (-6), reqExe);\n               \n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n     };\n     \n};",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-340-DET-EXP"
			},
			{
				"ID": "AEAT-340-DET-REC",
				"NAME": "AEAT. Modelo 340. Detalle Facturas Recibidas",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 340. Detalle facturas recibidas\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n     // Lanzamos búsqueda de IVA - FACTURAS RECIBIDAS\n     // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n\n     var busqueda = new VQuery(theRoot);\n     busqueda.setQuery(\"verp_3_dat/FAC_REC_C_SER_ENT_FCH\");\n     busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n     busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n     busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n     busqueda.exec();\n     lista = busqueda.result();\n     lista.sort(\"SER\", \"NUM_REG_IVA\");\n\n     // Leemos cada registro de factura\n     for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++) {\n          var registro = lista.readAt(numRegistro);\n          var locCif   = \"\";\n          // Dato importante el CIF\n          var cif      = registro.fieldToString(\"CIF\");\n          var cifLtr   = cif.substring(0, 2);\n          cifLtr       = cifLtr.toUpperCase();\n          // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n          switch(cifLtr) {\n               case \"AT\":\n               case \"BE\":\n               case \"BG\":\n               case \"CY\":\n               case \"CZ\":\n               case \"DE\":\n               case \"DK\":\n               case \"EE\":\n               case \"EL\":\n               case \"FI\":\n               case \"FR\":\n               case \"GB\":\n               case \"HR\":\n               case \"HU\":\n               case \"IE\":\n               case \"IT\":\n               case \"LT\":\n               case \"LU\":\n               case \"LV\":\n               case \"MT\":\n               case \"NL\":\n               case \"PL\":\n               case \"PT\":\n               case \"RO\":\n               case \"SE\":\n               case \"SI\":\n               case \"SK\":\n                    locCif = \"C\";\n                    break;\n          };\n          // Otro dato importante es el Código Postal\n          var cp      = registro.fieldToString(\"CPS\");\n          var codPrv  = \"\";\n          if (cp != \"\") {\n               codPrv = cp.substring(0, 2);\n          } else {\n               cp     = registro.fieldToString(\"AUX.CPS\");\n               codPrv = cp.substring(0, 2);\n          };\n\n          // Verificamos de qué tipo de CIF se trata\n          // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n          if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n          else if (locCif == \"C\")                                                         locCif = \"C\";\n          else                                                                            locCif = \"X\";\n\n          // Inicializamos variables\n          var numBimp = 0;\n          var baseGen = registro.fieldToDouble(\"BAS_GEN\");\n          var baseRed = registro.fieldToDouble(\"BAS_RED\");\n          var baseSup = registro.fieldToDouble(\"BAS_SUP\");\n          var baseEsp = registro.fieldToDouble(\"BAS_ESP\");\n          var baseExe = registro.fieldToDouble(\"BAS_EXE\");\n\n          if (baseGen != 0) {\n               numBimp++;\n               var tipoGen     = registro.fieldToDouble(\"POR_IVA_GEN\");\n               var cuotaGen    = registro.fieldToDouble(\"IVA_GEN\");\n               var tipoReqGen  = registro.fieldToDouble(\"POR_REQ_GEN\");\n               var reqGen      = registro.fieldToDouble(\"REQ_GEN\");\n               var totalGen    = baseGen + cuotaGen + reqGen;\n          };\n\n          if (baseRed != 0) {\n               numBimp++;\n               var tipoRed     = registro.fieldToDouble(\"POR_IVA_RED\");\n               var cuotaRed    = registro.fieldToDouble(\"IVA_RED\");\n               var tipoReqRed  = registro.fieldToDouble(\"POR_REQ_RED\");\n               var reqRed      = registro.fieldToDouble(\"REQ_RED\");\n               var totalRed    = baseRed + cuotaRed + reqRed;\n          };\n\n          if (baseSup != 0) {\n               numBimp++;\n               var tipoSup     = registro.fieldToDouble(\"POR_IVA_SUP\");\n               var cuotaSup    = registro.fieldToDouble(\"IVA_SUP\");\n               var tipoReqSup  = registro.fieldToDouble(\"POR_REQ_SUP\");\n               var reqSup      = registro.fieldToDouble(\"REQ_SUP\");\n               var totalSup    = baseSup + cuotaSup + reqSup;\n          };\n\n          if (baseEsp != 0) {\n               numBimp++;\n               var tipoEsp     = registro.fieldToDouble(\"POR_IVA_ESP\");\n               var cuotaEsp    = registro.fieldToDouble(\"IVA_ESP\");\n               var tipoReqEsp  = registro.fieldToDouble(\"POR_REQ_ESP\");\n               var reqEsp      = registro.fieldToDouble(\"REQ_ESP\");\n               var totalEsp    = baseEsp + cuotaEsp + reqEsp;\n          };\n\n          if (baseExe != 0) {\n               numBimp++;\n               var tipoExe     = 0;\n               var cuotaExe    = 0;\n               var tipoReqExe  = 0;\n               var reqExe      = 0;\n               var totalExe    = baseExe + cuotaExe + reqExe;\n          };\n\n          if (numBimp > 1) {\n               // Si hay más de una Base imponible afecta a la Clave de la Operación\n               // Ver dieño registro lógico AEAT 340 para consultar el resto de opciones en cuanto a la Clave de la Operación\n               // C --> Factura con varios tipos impositivos\n               var clvOpe      = \"C\";\n               var numRegsDesg = numBimp;\n          } else {\n               // En otro caso, quedaría a definir en función de la tipologías de registros de IVA\n               // Por defecto se asume que no hay ninguno de los otros casos por los que se define la Clave de la Operación\n               // Ver dieño registro lógico AEAT 340 para consultar el resto de opciones en cuanto a la Clave de la Operación\n               var clvOpe = \"\";\n               var numRegsDesg = 1;\n          };\n\n          var nombre      = registro.fieldToString(\"RAZ_SOC\");\n          var codPaiRes   = registro.fieldToString(\"AUX.PAI.ISO_2\");\n          var idFra       = registro.fieldToString(\"NUM_DOC\");\n          var numRegIva   = registro.fieldToString(\"NUM_REG_IVA\");\n          // Por defecto se asume que el número de facturas en el registro es 1 (no se está contemplando un resumen de facturas o tiques acumulados)\n          var numFras     = 1;\n          var fchCon      = new Date(registro.fieldToDate(\"FCH_CON\"));\n          fchCon          = convertirFecha(fchCon, \"aaaa/mm/dd\");\n          var fchFac      = new Date(registro.fieldToDate(\"FCH_FAC\"));\n          fchFac          = convertirFecha(fchFac, \"aaaa/mm/dd\");\n          if (fchFac != \"\") {\n               var fchExp = fchFac;\n               var fchOpe = fchFac;\n          } else {\n               var fchExp = fchCon;\n               var fchOpe = fchCon;\n          };\n\n\n          // Crear registro DETALLE y sus campos en el fichero\n          // Por cada Base imponible hay que generar un registro de DETALLE en el 340\n          if (baseGen != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoGen);\n               setEtiqueta(ficId, \"BAS-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), baseGen);\n               setEtiqueta(ficId, \"CUO-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaGen);\n               setEtiqueta(ficId, \"FRA-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), totalGen);\n               setEtiqueta(ficId, \"IDE-FRA-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-REC-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n          \n          if (baseRed != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoRed);\n               setEtiqueta(ficId, \"BAS-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), baseRed);\n               setEtiqueta(ficId, \"CUO-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaRed);\n               setEtiqueta(ficId, \"FRA-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), totalRed);\n               setEtiqueta(ficId, \"IDE-FRA-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-REC-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n          \n          if (baseSup != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoSup);\n               setEtiqueta(ficId, \"BAS-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), baseSup);\n               setEtiqueta(ficId, \"CUO-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaSup);\n               setEtiqueta(ficId, \"FRA-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), totalSup);\n               setEtiqueta(ficId, \"IDE-FRA-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-REC-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n\n          if (baseEsp != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoEsp);\n               setEtiqueta(ficId, \"BAS-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), baseEsp);\n               setEtiqueta(ficId, \"CUO-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaEsp);\n               setEtiqueta(ficId, \"FRA-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), totalEsp);\n               setEtiqueta(ficId, \"IDE-FRA-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-REC-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n\n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n\n          if (baseExe != 0)\n          {\n               var nuevoRegistroFic = altaRegistroCampos();\n               var numRegistroFic   = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n               // Modificar registro DETALLE recién creado a partir de las etiquetas definidas en sus campos en la plantilla\n               // Relacionado con de dónde es el CIF\n               if (locCif == \"N\") {\n                    // CIF nacional\n                    setEtiqueta(ficId, \"NIF-DEC-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), cif);\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), \"ES\");\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 1);\n               } else if (locCif == \"C\") {\n                    // CIF comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 2);\n                    setEtiqueta(ficId, \"COD-PAI-NIF-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cifLtr);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif.substring(2, 15));\n               } else {\n                    // no residente ni comunitario\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-REC-\" + (\"000000\" + numRegistroFic).slice (-6), nombre);\n                    setEtiqueta(ficId, \"COD-PAI-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), codPaiRes);\n                    setEtiqueta(ficId, \"CLV-IDE-REC-\"     + (\"000000\" + numRegistroFic).slice (-6), 4);\n                    setEtiqueta(ficId, \"NUM-IDE-FIS-REC-\" + (\"000000\" + numRegistroFic).slice (-6), cif);\n               };\n               setEtiqueta(ficId, \"CLV-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), clvOpe);\n               setEtiqueta(ficId, \"FCH-EXP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchExp);\n               setEtiqueta(ficId, \"FCH-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), fchOpe);\n               setEtiqueta(ficId, \"TIP-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), tipoExe);\n               setEtiqueta(ficId, \"BAS-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), baseExe);\n               setEtiqueta(ficId, \"CUO-IMP-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), cuotaExe);\n               setEtiqueta(ficId, \"FRA-OPE-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), totalExe);\n               setEtiqueta(ficId, \"IDE-FRA-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), idFra);\n               setEtiqueta(ficId, \"NUM-REG-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numRegIva);\n               setEtiqueta(ficId, \"NUM-FRS-REC-\"          + (\"000000\" + numRegistroFic).slice (-6), numFras);\n               setEtiqueta(ficId, \"NUM-RGS-DSG-REC-\"      + (\"000000\" + numRegistroFic).slice (-6), numRegsDesg);\n               \n               // Actualizar el campo descripción en función de la fórmula configurada\n               actualizarDescripcion(nuevoRegistroFic);\n          };\n     };\n     \n};",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-340-DET-REC"
			},
			{
				"ID": "AEAT-347-CAL-DEC-EMI",
				"NAME": "AEAT. Modelo 347. Cálculo registros declarados (Emitidas)",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 347. Cálculo registros declarados (emitidas)\n//\n// 08-11-2016 - Revisión 20.0\n// 08-03-2021 - Revisión 28.0\n// -------------------------------------------------------------------------------\n\nfunction calculoDeclaradosEmitidas()\n{\n    if (registroFicReg)\n    {\n        // Obtenemos la cifra anual de negocio\n        var cifraAnualNegocio = getEtiqueta(ficId, \"CIF-ANU-NEG\");\n\n        // Leemos los registros de IVA - FACTURAS EMTIDAS\n        // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n        var busqueda = new VQuery(theRoot);\n        busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n        busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n        busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n        busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n        busqueda.exec();\n        lista = busqueda.result();\n\n        // Multipartimos por CIF y procesamos las listas obtenidas\n        var listas = lista.multiSplit(\"CIF\");\n        for (var numLista = 0; numLista < listas.length; numLista++)\n        {\n            // Por cada CIF inicializamos valores\n            var listaCIF = listas[numLista];\n            var importeTotal = 0;\n            var importe1T    = 0;\n            var importe2T    = 0;\n            var importe3T    = 0;\n            var importe4T    = 0;\n            var locCif       = \"\";\n\n            // Comprobamos que el CIF no esté vacío antes de procesar los registros de esa lista de CIF\n            var registro = listaCIF.readAt(0);\n            var cif      = registro.fieldToString(\"CIF\");\n            if (cif != \"\")\n            {\n                // Recorremos todos los registros multipartidos por CIF haciendo los cálculos\n                for (var numRegistro = 0; numRegistro < listaCIF.size(); numRegistro++)\n                {\n                    // Leemos el registro y realizamos los cálculos\n                    var registro = listaCIF.readAt(numRegistro);\n\n                    var base     = registro.fieldToDouble(\"BAS_TOT\");\n                    var cuota    = registro.fieldToDouble(\"IVA_TOT\");\n                    var req      = registro.fieldToDouble(\"REQ_TOT\");\n                    var mes      = registro.fieldToInt(\"MES\");\n                    var importe  = base + cuota + req;\n\n                    // Acumulamos importes (Régimen general)\n                    if ((registro.fieldToString(\"SER.TIP_IVA_DEV\") == \"1\")&&(registro.fieldToString(\"CON_RET_ALQ\") == \"0\" )&&(registro.fieldToString(\"CON_RET_IRP\") == \"0\" ))\n                    {\n                        importeTotal += importe;\n                        if      (mes < 4)  importe1T += importe;\n                        else if (mes < 7)  importe2T += importe;\n                        else if (mes < 10) importe3T += importe;\n                        else               importe4T += importe;\n                    }\n                }\n\n                \n                // Si la cifra de negocio (en valor absoluto) es superior al importe mínimo de cifra de negocio se graba el registro de DECLARADO en el fichero\n                if (Math.abs(importeTotal) > cifraAnualNegocio)\n                {\n                    // Leer datos del declarado\n                    var cif         = registro.fieldToString(\"CIF\");\n                    var cifLtr      = cif.substring(0, 2);\n                    cifLtr          = cifLtr.toUpperCase();\n                    // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n                    switch(cifLtr)\n                    {\n                         case \"AT\":\n                         case \"BE\":\n                         case \"BG\":\n                         case \"CY\":\n                         case \"CZ\":\n                         case \"DE\":\n                         case \"DK\":\n                         case \"EE\":\n                         case \"EL\":\n                         case \"FI\":\n                         case \"FR\":\n                         case \"GB\":\n                         case \"HR\":\n                         case \"HU\":\n                         case \"IE\":\n                         case \"IT\":\n                         case \"LT\":\n                         case \"LU\":\n                         case \"LV\":\n                         case \"MT\":\n                         case \"NL\":\n                         case \"PL\":\n                         case \"PT\":\n                         case \"RO\":\n                         case \"SE\":\n                         case \"SI\":\n                         case \"SK\":\n                              locCif = \"C\";\n                              break;\n                    }\n                    var nombre      = registro.fieldToString(\"RAZ_SOC\");\n                    var cp          = registro.fieldToString(\"CPS\");\n                    var codPrv      = \"\";\n                    if (cp != \"\") {\n                         codPrv = cp.substring(0, 2);\n                    } else {\n                         cp     = registro.fieldToString(\"AUX.CPS\");\n                         codPrv = cp.substring(0, 2);\n                    }\n\n                    // Vamos a ver si se trata de un CIF nacional\n                    // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n                    if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n                    else if (locCif == \"C\")                                                         locCif = \"C\";\n                    else                                                                            locCif = \"X\";\n\n                    // Crear registro DECLARADO y sus campos en el fichero\n                    var nuevoRegistroFic = altaRegistroCampos();\n                    var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n                    \n                    // Modificamos los registros en función de su etiqueta\n\n                    // Relacionado con de dónde es el CIF\n                    if (locCif == \"N\") {\n                         // CIF nacional\n                         setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                    } else if (locCif == \"C\") {\n                         // CIF comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                    } else {\n                        // no residente ni comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                    }\n\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                    setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"B\");\n                    setEtiqueta(ficId, \"IMP-ANU-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotal);\n                    setEtiqueta(ficId, \"IMP-1T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe1T);\n                    setEtiqueta(ficId, \"IMP-2T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe2T);\n                    setEtiqueta(ficId, \"IMP-3T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe3T);\n                    setEtiqueta(ficId, \"IMP-4T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe4T);\n\n                    // Actualizar el campo descripción en función de la fórmula configurada\n                    actualizarDescripcion(nuevoRegistroFic);\n                }\n            }\n        }\n        \n        \n        var busqueda = new VQuery(theRoot);\n        busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n        busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n        busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n        busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n        busqueda.exec();\n        lista = busqueda.result();\n\n        // Multipartimos por CIF y procesamos las listas obtenidas\n        var listas = lista.multiSplit(\"CIF\");\n        for (var numLista = 0; numLista < listas.length; numLista++)\n        {\n            // Por cada CIF inicializamos valores\n            var listaCIF = listas[numLista];\n            var importeTotal = 0;\n            var importe1T    = 0;\n            var importe2T    = 0;\n            var importe3T    = 0;\n            var importe4T    = 0;\n            var locCif       = \"\";\n\n            // Comprobamos que el CIF no esté vacío antes de procesar los registros de esa lista de CIF\n            var registro = listaCIF.readAt(0);\n            var cif      = registro.fieldToString(\"CIF\");\n            if (cif != \"\")\n            {\n                // Recorremos todos los registros multipartidos por CIF haciendo los cálculos\n                for (var numRegistro = 0; numRegistro < listaCIF.size(); numRegistro++)\n                {\n                    // Leemos el registro y realizamos los cálculos\n                    var registro = listaCIF.readAt(numRegistro);\n\n                    var base     = registro.fieldToDouble(\"BAS_TOT\");\n                    var mes      = registro.fieldToInt(\"MES\");\n                    var importe  = base;\n\n                    // Acumulamos importes (Régimen general)\n                    if ((registro.fieldToString(\"SER.TIP_IVA_DEV\") == \"6\")&&(registro.fieldToString(\"CON_RET_ALQ\") == \"0\" )&&(registro.fieldToString(\"CON_RET_IRP\") == \"0\" ))\n                    {\n                        importeTotal += importe;\n                        if      (mes < 4)  importe1T += importe;\n                        else if (mes < 7)  importe2T += importe;\n                        else if (mes < 10) importe3T += importe;\n                        else               importe4T += importe;\n                    }\n                }\n\n                \n                // Si la cifra de negocio (en valor absoluto) es superior al importe mínimo de cifra de negocio se graba el registro de DECLARADO en el fichero\n                if (Math.abs(importeTotal) > cifraAnualNegocio)\n                {\n                    // Leer datos del declarado\n                    var cif         = registro.fieldToString(\"CIF\");\n                    var cifLtr      = cif.substring(0, 2);\n                    cifLtr          = cifLtr.toUpperCase();\n                    // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n                    switch(cifLtr)\n                    {\n                         case \"AT\":\n                         case \"BE\":\n                         case \"BG\":\n                         case \"CY\":\n                         case \"CZ\":\n                         case \"DE\":\n                         case \"DK\":\n                         case \"EE\":\n                         case \"EL\":\n                         case \"FI\":\n                         case \"FR\":\n                         case \"GB\":\n                         case \"HR\":\n                         case \"HU\":\n                         case \"IE\":\n                         case \"IT\":\n                         case \"LT\":\n                         case \"LU\":\n                         case \"LV\":\n                         case \"MT\":\n                         case \"NL\":\n                         case \"PL\":\n                         case \"PT\":\n                         case \"RO\":\n                         case \"SE\":\n                         case \"SI\":\n                         case \"SK\":\n                              locCif = \"C\";\n                              break;\n                    }\n                    var nombre      = registro.fieldToString(\"RAZ_SOC\");\n                    var cp          = registro.fieldToString(\"CPS\");\n                    var codPrv      = \"\";\n                    if (cp != \"\") {\n                         codPrv = cp.substring(0, 2);\n                    } else {\n                         cp     = registro.fieldToString(\"AUX.CPS\");\n                         codPrv = cp.substring(0, 2);\n                    }\n\n                    // Vamos a ver si se trata de un CIF nacional\n                    // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n                    if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n                    else if (locCif == \"C\")                                                         locCif = \"C\";\n                    else                                                                            locCif = \"X\";\n\n                    // Crear registro DECLARADO y sus campos en el fichero\n                    var nuevoRegistroFic = altaRegistroCampos();\n                    var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n                    \n                    // Modificamos los registros en función de su etiqueta\n\n                    // Relacionado con de dónde es el CIF\n                    if (locCif == \"N\") {\n                         // CIF nacional\n                         setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                    } else if (locCif == \"C\") {\n                         // CIF comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                    } else {\n                        // no residente ni comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                    }\n\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                    setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"B\");\n                    setEtiqueta(ficId, \"IMP-ANU-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotal);\n                    setEtiqueta(ficId, \"IMP-1T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe1T);\n                    setEtiqueta(ficId, \"IMP-2T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe2T);\n                    setEtiqueta(ficId, \"IMP-3T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe3T);\n                    setEtiqueta(ficId, \"IMP-4T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe4T);\n                    setEtiqueta(ficId, \"CON_ISP_84-\"  + (\"000000\" + numRegistro).slice (-6), \"X\");\n\n                    // Actualizar el campo descripción en función de la fórmula configurada\n                    actualizarDescripcion(nuevoRegistroFic);\n                }\n            }\n        }\n    }\n}",
				"VER_ULT_ACT": "29.0",
				"OFF": false,
				"ID_SCR": "AEAT-347-CAL-DEC-EMI"
			},
			{
				"ID": "AEAT-347-CAL-DEC-REC",
				"NAME": "AEAT. Modelo 347. Cálculo registros declarados (Recibidas)",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 347. Cálculo registros declarados (recibidas)\n//\n// 08-11-2016 - Revisión 20.0\n// 08-03-2021 - Revisión 28.0\n// -------------------------------------------------------------------------------\n\nfunction calculoDeclaradosRecibidas()\n{\n    if (registroFicReg)\n    {\n        // Obtenemos la cifra anual de negocio\n        var cifraAnualNegocio = getEtiqueta(ficId, \"CIF-ANU-NEG\");\n\n        // Leemos los registros de IVA - FACTURAS RECIBIDAS\n        // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n        var busqueda = new VQuery(theRoot);\n        busqueda.setQuery(\"verp_3_dat/FAC_REC_C_SER_ENT_FCH\");\n        busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n        busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n        busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n        busqueda.exec();\n        lista = busqueda.result();\n\n        // Multipartimos por CIF y procesamos las listas obtenidas\n        var listas = lista.multiSplit(\"CIF\");\n        for (var numLista = 0; numLista < listas.length; numLista++)\n        {\n            // Por cada CIF inicializamos valores\n            var listaCIF = listas[numLista];\n            var importeTotal = 0;\n            var importe1T    = 0;\n            var importe2T    = 0;\n            var importe3T    = 0;\n            var importe4T    = 0;\n            var locCif       = \"\";\n\n            // Comprobamos que el CIF no esté vacío antes de procesar los registros de esa lista de CIF\n            var registro = listaCIF.readAt(0);\n            var cif      = registro.fieldToString(\"CIF\");\n            if (cif != \"\")\n            {\n                // Recorremos todos los registros multipartidos por CIF haciendo los cálculos\n                for (var numRegistro = 0; numRegistro < listaCIF.size(); numRegistro++)\n                {\n                    // Leemos el registro y realizamos los cálculos\n                    var registro = listaCIF.readAt(numRegistro);\n\n                    var base     = registro.fieldToDouble(\"BAS_TOT\");\n                    var cuota    = registro.fieldToDouble(\"IVA_TOT\");\n                    var req      = registro.fieldToDouble(\"REQ_TOT\");\n                    var mes      = registro.fieldToInt(\"MES\");\n                    var importe  = base + cuota + req;\n\n                    // Acumulamos importes (Operaciones interiores corrientes y Operaciones interiores bienes inversión)\n                    if (((registro.fieldToString(\"SER.TIP_IVA_DED\") == \"1\") || (registro.fieldToString(\"SER.TIP_IVA_DED\") == \"6\")) \n                         && (registro.fieldToString(\"CON_RET_ALQ\") == \"0\" )&& (registro.fieldToString(\"CON_RET_IRP\") == \"0\" ) )\n                    {\n                        importeTotal += importe;\n                        if      (mes < 4)  importe1T += importe;\n                        else if (mes < 7)  importe2T += importe;\n                        else if (mes < 10) importe3T += importe;\n                        else               importe4T += importe;\n                    }\n                }\n\n                \n                // Si la cifra de negocio (en valor absoluto) es superior al importe mínimo de cifra de negocio se graba el registro de DECLARADO en el fichero\n                if (Math.abs(importeTotal) > cifraAnualNegocio)\n                {\n                    // Leer datos del declarado\n                    var cif         = registro.fieldToString(\"CIF\");                    \n                    var cifLtr      = cif.substring(0, 2);\n                    cifLtr          = cifLtr.toUpperCase();\n                    // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n                    switch(cifLtr)\n                    {\n                         case \"AT\":\n                         case \"BE\":\n                         case \"BG\":\n                         case \"CY\":\n                         case \"CZ\":\n                         case \"DE\":\n                         case \"DK\":\n                         case \"EE\":\n                         case \"EL\":\n                         case \"FI\":\n                         case \"FR\":\n                         case \"GB\":\n                         case \"HR\":\n                         case \"HU\":\n                         case \"IE\":\n                         case \"IT\":\n                         case \"LT\":\n                         case \"LU\":\n                         case \"LV\":\n                         case \"MT\":\n                         case \"NL\":\n                         case \"PL\":\n                         case \"PT\":\n                         case \"RO\":\n                         case \"SE\":\n                         case \"SI\":\n                         case \"SK\":\n                              locCif = \"C\";\n                              break;\n                    }\n                    var nombre      = registro.fieldToString(\"RAZ_SOC\");\n                    var cp          = registro.fieldToString(\"CPS\");\n                    var codPrv      = \"\";\n                    if (cp != \"\") {\n                         codPrv = cp.substring(0, 2);\n                    } else {\n                         cp     = registro.fieldToString(\"AUX.CPS\");\n                         codPrv = cp.substring(0, 2);\n                    }\n\n                    // Vamos a ver si se trata de un CIF nacional\n                    // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n                    if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n                    else if (locCif == \"C\")                                                         locCif = \"C\";\n                    else                                                                            locCif = \"X\";\n\n                    // Crear registro DECLARADO y sus campos en el fichero\n                    var nuevoRegistroFic = altaRegistroCampos();\n                    var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n                    // Modificamos los registros en función de su etiqueta\n\n                    // Relacionado con de dónde es el CIF\n                    if (locCif == \"N\") {\n                         // CIF nacional\n                         setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                    } else if (locCif == \"C\") {\n                         // CIF comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                    } else {\n                        // no residente ni comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                    }\n\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                    setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"A\");\n                    setEtiqueta(ficId, \"IMP-ANU-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotal);\n                    setEtiqueta(ficId, \"IMP-1T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe1T);\n                    setEtiqueta(ficId, \"IMP-2T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe2T);\n                    setEtiqueta(ficId, \"IMP-3T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe3T);\n                    setEtiqueta(ficId, \"IMP-4T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe4T);\n\n                    // Actualizar el campo descripción en función de la fórmula configurada\n                    actualizarDescripcion(nuevoRegistroFic);\n                }\n            }\n        }\n        \n    \n        // Leemos los registros de IVA - FACTURAS RECIBIDAS\n        // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n        var busqueda = new VQuery(theRoot);\n        busqueda.setQuery(\"verp_3_dat/FAC_REC_C_SER_ENT_FCH\");\n        busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n        busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n        busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n        busqueda.exec();\n        lista = busqueda.result();\n\n        // Multipartimos por CIF y procesamos las listas obtenidas\n        var listas = lista.multiSplit(\"CIF\");\n        for (var numLista = 0; numLista < listas.length; numLista++)\n        {\n            // Por cada CIF inicializamos valores\n            var listaCIF = listas[numLista];\n            var importeTotal = 0;\n            var importe1T    = 0;\n            var importe2T    = 0;\n            var importe3T    = 0;\n            var importe4T    = 0;\n            var locCif       = \"\";\n\n            // Comprobamos que el CIF no esté vacío antes de procesar los registros de esa lista de CIF\n            var registro = listaCIF.readAt(0);\n            var cif      = registro.fieldToString(\"CIF\");\n            if (cif != \"\")\n            {\n                // Recorremos todos los registros multipartidos por CIF haciendo los cálculos\n                for (var numRegistro = 0; numRegistro < listaCIF.size(); numRegistro++)\n                {\n                    // Leemos el registro y realizamos los cálculos\n                    var registro = listaCIF.readAt(numRegistro);\n\n                    var base     = registro.fieldToDouble(\"BAS_TOT\");\n                    var mes      = registro.fieldToInt(\"MES\");\n                    var importe  = base;\n\n                    // Acumulamos importes (Operaciones interiores corrientes y Operaciones interiores bienes inversión)\n                    if (((registro.fieldToString(\"SER.TIP_IVA_DED\") == \"A\")) \n                         && (registro.fieldToString(\"CON_RET_ALQ\") == \"0\" )&& (registro.fieldToString(\"CON_RET_IRP\") == \"0\" ) )\n                    {\n                        importeTotal += importe;\n                        if      (mes < 4)  importe1T += importe;\n                        else if (mes < 7)  importe2T += importe;\n                        else if (mes < 10) importe3T += importe;\n                        else               importe4T += importe;\n                    }\n                }\n\n                \n                // Si la cifra de negocio (en valor absoluto) es superior al importe mínimo de cifra de negocio se graba el registro de DECLARADO en el fichero\n                if (Math.abs(importeTotal) > cifraAnualNegocio)\n                {\n                    // Leer datos del declarado\n                    var cif         = registro.fieldToString(\"CIF\");                    \n                    var cifLtr      = cif.substring(0, 2);\n                    cifLtr          = cifLtr.toUpperCase();\n                    // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n                    switch(cifLtr)\n                    {\n                         case \"AT\":\n                         case \"BE\":\n                         case \"BG\":\n                         case \"CY\":\n                         case \"CZ\":\n                         case \"DE\":\n                         case \"DK\":\n                         case \"EE\":\n                         case \"EL\":\n                         case \"FI\":\n                         case \"FR\":\n                         case \"GB\":\n                         case \"HR\":\n                         case \"HU\":\n                         case \"IE\":\n                         case \"IT\":\n                         case \"LT\":\n                         case \"LU\":\n                         case \"LV\":\n                         case \"MT\":\n                         case \"NL\":\n                         case \"PL\":\n                         case \"PT\":\n                         case \"RO\":\n                         case \"SE\":\n                         case \"SI\":\n                         case \"SK\":\n                              locCif = \"C\";\n                              break;\n                    }\n                    var nombre      = registro.fieldToString(\"RAZ_SOC\");\n                    var cp          = registro.fieldToString(\"CPS\");\n                    var codPrv      = \"\";\n                    if (cp != \"\") {\n                         codPrv = cp.substring(0, 2);\n                    } else {\n                         cp     = registro.fieldToString(\"AUX.CPS\");\n                         codPrv = cp.substring(0, 2);\n                    }\n\n                    // Vamos a ver si se trata de un CIF nacional\n                    // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n                    if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n                    else if (locCif == \"C\")                                                         locCif = \"C\";\n                    else                                                                            locCif = \"X\";\n\n                    // Crear registro DECLARADO y sus campos en el fichero\n                    var nuevoRegistroFic = altaRegistroCampos();\n                    var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n\n                    // Modificamos los registros en función de su etiqueta\n\n                    // Relacionado con de dónde es el CIF\n                    if (locCif == \"N\") {\n                         // CIF nacional\n                         setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                    } else if (locCif == \"C\") {\n                         // CIF comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                         setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                    } else {\n                        // no residente ni comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                    }\n\n                    setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                    setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"A\");\n                    setEtiqueta(ficId, \"IMP-ANU-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotal);\n                    setEtiqueta(ficId, \"IMP-1T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe1T);\n                    setEtiqueta(ficId, \"IMP-2T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe2T);\n                    setEtiqueta(ficId, \"IMP-3T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe3T);\n                    setEtiqueta(ficId, \"IMP-4T-OPE-\"  + (\"000000\" + numRegistro).slice (-6), importe4T);\n                    setEtiqueta(ficId, \"CON_ISP_84-\"  + (\"000000\" + numRegistro).slice (-6), \"X\");\n\n                    // Actualizar el campo descripción en función de la fórmula configurada\n                    actualizarDescripcion(nuevoRegistroFic);\n                }\n            }\n        }\n    }\n}",
				"VER_ULT_ACT": "29.0",
				"OFF": false,
				"ID_SCR": "AEAT-347-CAL-DEC-REC"
			},
			{
				"ID": "AEAT-347-CAL-DEC",
				"NAME": "AEAT. Modelo 347. Cálculo de declarados (Emitidas y Recibidas)",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 347. Cálculo declarados (emitidas y recibidas)\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\ncalculoDeclaradosRecibidas();\ncalculoDeclaradosEmitidas();",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-347-CAL-DEC"
			},
			{
				"ID": "AEAT-347-GEN-FIC",
				"NAME": "AEAT. Modelo 347. Generar fichero",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 347. Generar fichero\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n// Ejecutamos el cálculo de los totales\ncalcularFormulaTotales();\n\n// Generamos el fichero en formato TXT\ngenerarFicheroTxt();\n",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-347-GEN-FIC"
			},
			{
				"ID": "AEAT-349-CAL-DEC-EMI",
				"NAME": "AEAT. Modelo 349. Cálculo registros declarados (Emitidas)",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 349. Cálculo registros declarados (emitidas)\n//\n// 08-11-2016 - Revisión 20.0\n// 28-03-2017 - Añadidos Servicios intracomunitarios Y Separados de Bienes\n// 19-09-2019 - Sustituir el simbolo '+' por un espacio en la razón social\n// -------------------------------------------------------------------------------\n\nfunction calculoDeclaradosEmitidas()\n{\n    if (registroFicReg)\n    {\n        // Obtenemos la cifra anual de negocio\n        var cifraAnualNegocio = getEtiqueta(ficId, \"CIF-ANU-NEG\");\n\n        // Leemos los registros de IVA - FACTURAS EMTIDAS\n        // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n        var busqueda = new VQuery(theRoot);\n        busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n        busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n        busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n        busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n        busqueda.exec();\n        lista = busqueda.result();\n\n        // Multipartimos por CIF y procesamos las listas obtenidas\n        var listas = lista.multiSplit(\"CIF\");\n        for (var numLista = 0; numLista < listas.length; numLista++)\n        {\n            // Por cada CIF inicializamos valores\n            var listaCIF = listas[numLista];\n            var importeTotal = 0;\n\n            // 20-03-2017 - Revisión Añadir Servicios\n            var importeTotalServicios = 0;\n            // ---------------------------------------\n\n            var locCif       = \"\";\n            // Comprobamos que el CIF no esté vacío antes de procesar los registros de esa lista de CIF\n            var registro = listaCIF.readAt(0);\n            var cif      = registro.fieldToString(\"CIF\");\n            if (cif != \"\")\n            {\n                // Recorremos todos los registros multipartidos por CIF haciendo los cálculos\n                for (var numRegistro = 0; numRegistro < listaCIF.size(); numRegistro++)\n                {\n                    // Leemos el registro y realizamos los cálculos\n                    var registro = listaCIF.readAt(numRegistro);\n\n                    var base     = registro.fieldToDouble(\"BAS_TOT\");\n                    var importe  = base;\n\n                    // Acumulamos importes (Régimen general)\n                    if (registro.fieldToString(\"SER.TIP_IVA_DEV\") == \"4\")\n                    {\n                        importeTotal += importe;\n                    };\n\n                    // 20-03-2017 - Revisión Añadir Servicios\n                    if ((registro.fieldToString(\"SER.TIP_IVA_DEV\") == \"2\"))\n                    {\n                        importeTotalServicios += importe;\n                    };\n                    // ---------------------------------------\n\n                };\n\n                \n                // Si la cifra de negocio (en valor absoluto) es superior a cero se graba el registro de DECLARADO en el fichero\n                // Dejamos este filtro por si es necesario en el futuro\n                if ((Math.abs(importeTotal) > 0) || (Math.abs(importeTotalServicios) > 0))\n                {\n                    // Leer datos del declarado\n                    var cif         = registro.fieldToString(\"CIF\");\n                    var cifLtr      = cif.substring(0, 2);\n                    cifLtr          = cifLtr.toUpperCase();\n                    // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n                    switch(cifLtr)\n                    {\n                         case \"AT\":\n                         case \"BE\":\n                         case \"BG\":\n                         case \"CY\":\n                         case \"CZ\":\n                         case \"DE\":\n                         case \"DK\":\n                         case \"EE\":\n                         case \"EL\":\n                         case \"FI\":\n                         case \"FR\":\n                         case \"GB\":\n                         case \"HR\":\n                         case \"HU\":\n                         case \"IE\":\n                         case \"IT\":\n                         case \"LT\":\n                         case \"LU\":\n                         case \"LV\":\n                         case \"MT\":\n                         case \"NL\":\n                         case \"PL\":\n                         case \"PT\":\n                         case \"RO\":\n                         case \"SE\":\n                         case \"SI\":\n                         case \"SK\":\n                              locCif = \"C\";\n                              break;\n                    };\n                    // 19-09-2019 - Sustituir el simbolo '+' por un espacio en la razón social\n                    var nombre      = registro.fieldToString(\"RAZ_SOC\").replace(\"+\", \" \");\n                    var codPrv      = \"\";\n\n                    // Vamos a ver si se trata de un CIF nacional\n                    // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n                    if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n                    else if (locCif == \"C\")                                                         locCif = \"C\";\n                    else                                                                            locCif = \"X\";\n\n                    // 20-03-2017 - Separamos Bienes y Servicios\n\t\t\t\t\t\n                    if (importeTotal != 0)\n                    {\n                        // Crear registro DECLARADO Bienes y sus campos en el fichero\n                        var nuevoRegistroFic = altaRegistroCampos();\n                        var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n                    \n                        // Modificamos los registros en función de su etiqueta\n\n                        // Relacionado con de dónde es el CIF\n                        if (locCif == \"N\") \n                        {\n                             // CIF nacional\n                             setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                             setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                        }\n                        else if (locCif == \"C\")\n                        {\n                             // CIF comunitario\n                             setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                             setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                             setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                             setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                        } \n                        else \n                        {\n                             // no residente ni comunitario\n                             setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                             setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                        };\n\n                        setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                        setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"E\");\n                        setEtiqueta(ficId, \"BAS-IMP-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotal);\n\n                        // Actualizar el campo descripción en función de la fórmula configurada\n                        actualizarDescripcion(nuevoRegistroFic);\n                    };\n\t\t\t\t\n                    if (importeTotalServicios != 0)\n                    { \n                        // Crear registro DECLARADO Servicios y sus campos en el fichero\n                        var nuevoRegistroFic = altaRegistroCampos();\n                        var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n                    \n                        // Modificamos los registros en función de su etiqueta\n\n                        // Relacionado con de dónde es el CIF\n                        if (locCif == \"N\") \n                        {\n                             // CIF nacional\n                             setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                             setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                        }\n                        else if (locCif == \"C\")\n                        {\n                             // CIF comunitario\n                             setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                             setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                             setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                             setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                        }\n                        else \n                        {\n                             // no residente ni comunitario\n                             setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                             setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                        };\n\n                        setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                        setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"S\");\n                        setEtiqueta(ficId, \"BAS-IMP-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotalServicios);\n\n                        // Actualizar el campo descripción en función de la fórmula configurada\n                        actualizarDescripcion(nuevoRegistroFic);\n                    };\n                };\t\n            };\n        };\n    };\n};",
				"VER_ULT_ACT": "26.0",
				"OFF": false,
				"ID_SCR": "AEAT-349-CAL-DEC-EMI"
			},
			{
				"ID": "AEAT-349-CAL-DEC",
				"NAME": "AEAT. Modelo 349. Cálculo de declarados (Emitidas y Recibidas)",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 349. Cálculo de declarados (emitidas y recibidas)\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\ncalculoDeclaradosRecibidas();\ncalculoDeclaradosEmitidas();",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-349-CAL-DEC"
			},
			{
				"ID": "AEAT-349-CAL-DEC-REC",
				"NAME": "AEAT. Modelo 349. Cálculo registros declarados (Recibidas)",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 349. Cálculo registros declarados (recibidas)\n//\n// 08-11-2016 - Revisión 20.0\n// 28-03-2017 - Añadidos Servicios intracomunitarios Y Separados de Bienes\n// 19-09-2019 - Sustituir el simbolo '+' por un espacio en la razón social\n// -------------------------------------------------------------------------------\n\nfunction calculoDeclaradosRecibidas()\n{\n    if (registroFicReg)\n    {\n\n        // Leemos los registros de IVA - FACTURAS RECIBIDAS\n        // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n        var busqueda = new VQuery(theRoot);\n        busqueda.setQuery(\"verp_3_dat/FAC_REC_C_SER_ENT_FCH\");\n        busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n        busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n        busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n        busqueda.exec();\n        lista = busqueda.result();\n\n        // Multipartimos por CIF y procesamos las listas obtenidas\n        var listas = lista.multiSplit(\"CIF\");\n        for (var numLista = 0; numLista < listas.length; numLista++)\n        {\n            // Por cada CIF inicializamos valores\n            var listaCIF = listas[numLista];\n            var importeTotal = 0;\n\n            // 20-03-2017 - Revisión Añadir Servicios\n            var importeTotalServicios = 0;\n            // ---------------------------------------\n\n            var locCif       = \"\";\n\n            // Comprobamos que el CIF no esté vacío antes de procesar los registros de esa lista de CIF\n            var registro = listaCIF.readAt(0);\n            var cif      = registro.fieldToString(\"CIF\");\n            if (cif != \"\")\n            {\n                // Recorremos todos los registros multipartidos por CIF haciendo los cálculos\n                for (var numRegistro = 0; numRegistro < listaCIF.size(); numRegistro++)\n                {\n                    // Leemos el registro y realizamos los cálculos\n                    var registro = listaCIF.readAt(numRegistro);\n\n                    var base     = registro.fieldToDouble(\"BAS_TOT\");\n                    var importe  = base;\n\n                    // Acumulamos importes (Operaciones interiores corrientes y Operaciones interiores bienes inversión)\n                    if ((registro.fieldToString(\"SER.TIP_IVA_DED\") == \"3\"))\n                    {\n                        importeTotal += importe;\n                    };\n\n                    // 20-03-2017 - Revisión Añadir Servicios\n                    if ((registro.fieldToString(\"SER.TIP_IVA_DED\") == \"9\"))\n                    {\n                       importeTotalServicios += importe;\n                    };\n                    // ---------------------------------------\n\n\n\n\n\n                };\n             \n                // Si la cifra de negocio (en valor absoluto) es superior 0 se graba el registro de DECLARADO en el fichero\n                // Dejamos este filtro por si es necesario en el futuro\n                if ((Math.abs(importeTotal) > 0) || (Math.abs(importeTotalServicios) > 0))\n                {\n                    // Leer datos del declarado\n                    var cif         = registro.fieldToString(\"CIF\");                    \n                    var cifLtr      = cif.substring(0, 2);\n                    cifLtr          = cifLtr.toUpperCase();\n                    // Si las dos primeras letras del CIF ya son de alguno de los países comunitarios ya marcamos el cif como comunitario \"C\"\n                    switch(cifLtr)\n                    {\n                         case \"AT\":\n                         case \"BE\":\n                         case \"BG\":\n                         case \"CY\":\n                         case \"CZ\":\n                         case \"DE\":\n                         case \"DK\":\n                         case \"EE\":\n                         case \"EL\":\n                         case \"FI\":\n                         case \"FR\":\n                         case \"GB\":\n                         case \"HR\":\n                         case \"HU\":\n                         case \"IE\":\n                         case \"IT\":\n                         case \"LT\":\n                         case \"LU\":\n                         case \"LV\":\n                         case \"MT\":\n                         case \"NL\":\n                         case \"PL\":\n                         case \"PT\":\n                         case \"RO\":\n                         case \"SE\":\n                         case \"SI\":\n                         case \"SK\":\n                              locCif = \"C\";\n                              break;\n                    };\n                    // 19-09-2019 - Sustituir el simbolo '+' por un espacio en la razón social\n                    var nombre      = registro.fieldToString(\"RAZ_SOC\").replace(\"+\", \" \");\n                    var codPrv      = \"\";\n\n                    // Vamos a ver si se trata de un CIF nacional\n                    // N --> CIF nacional   C--> CIF comunitario   X--> no residente y no comunitario\n                    if ((String(cif).length == 9) && (Number(codPrv) > 0) && (Number(codPrv) < 53)) locCif = \"N\";\n                    else if (locCif == \"C\")                                                         locCif = \"C\";\n                    else                                                                            locCif = \"X\";\n\n                    // Crear registro DECLARADO y sus campos en el fichero\n\n\n                    // 20-03-2017 - Separamos Bienes y Servicios\n\t\t\t\t\t\n                    if (importeTotal != 0)\n                    {\n                       var nuevoRegistroFic = altaRegistroCampos();\n                       var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n                    \n                       // Modificamos los registros en función de su etiqueta\n\n                       // Relacionado con de dónde es el CIF\n                       if (locCif == \"N\") {\n                          // CIF nacional\n                          setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                          setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                       }\n                       else if (locCif == \"C\")\n                       {\n                          // CIF comunitario\n                          setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                          setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                          setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                          setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                       }\n                       else\n                       {\n                        // no residente ni comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                       };\n\n                       setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                       setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"A\");\n                       setEtiqueta(ficId, \"BAS-IMP-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotal);\n\n                       // Actualizar el campo descripción en función de la fórmula configurada\n                       actualizarDescripcion(nuevoRegistroFic);\n                    };\n\n                    if (importeTotalServicios != 0)\n                    {\n                       var nuevoRegistroFic = altaRegistroCampos();\n                       var numRegistro      = nuevoRegistroFic.fieldToInt(\"NUM_REG\");\n                    \n                       // Modificamos los registros en función de su etiqueta\n\n                       // Relacionado con de dónde es el CIF\n                       if (locCif == \"N\") {\n                          // CIF nacional\n                          setEtiqueta(ficId, \"NIF-DEC-\"     + (\"000000\" + numRegistro).slice (-6), cif);\n                          setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), codPrv);\n                       }\n                       else if (locCif == \"C\")\n                       {\n                          // CIF comunitario\n                          setEtiqueta(ficId, \"COD-PRO-\"             + (\"000000\" + numRegistro).slice (-6), \"99\");\n                          setEtiqueta(ficId, \"COD-PAI-\"             + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                          setEtiqueta(ficId, \"COD-PAI-OPE-COM-\"     + (\"000000\" + numRegistro).slice (-6), cifLtr);\n                          setEtiqueta(ficId, \"NIF-OPE-COM-\"         + (\"000000\" + numRegistro).slice (-6), cif.substring(2, 15));\n                       }\n                       else\n                       {\n                        // no residente ni comunitario\n                         setEtiqueta(ficId, \"COD-PRO-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                         setEtiqueta(ficId, \"COD-PAI-\"     + (\"000000\" + numRegistro).slice (-6), \"99\");\n                       };\n\n                       setEtiqueta(ficId, \"NOM-FIS-DEC-\" + (\"000000\" + numRegistro).slice (-6), nombre);\n                       setEtiqueta(ficId, \"CLV-OPE-\"     + (\"000000\" + numRegistro).slice (-6), \"I\");\n                       setEtiqueta(ficId, \"BAS-IMP-OPE-\" + (\"000000\" + numRegistro).slice (-6), importeTotalServicios);\n\n                       // Actualizar el campo descripción en función de la fórmula configurada\n                       actualizarDescripcion(nuevoRegistroFic);\n                    };\n\n\n\n                };\n            };\n        };\n    };\n};",
				"VER_ULT_ACT": "26.0",
				"OFF": false,
				"ID_SCR": "AEAT-349-CAL-DEC-REC"
			},
			{
				"ID": "AEAT-390",
				"NAME": "AEAT. Modelo 390. Cálculo",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 390. Cálculo\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n(function calcula390()\n{\n    // Leemos los registros de IVA repercutido\n    var lista = cargarLista(\"verp_3_dat/FAC_EMI_C\", \"ID\", [])\n\n    // Recorremos los registros calculando el valor de retorno\n    for (numRegistro = 0; numRegistro < lista.size(); numRegistro++)\n    {\n        // Realizamos los cálculos en función de los parámetros recibidos en la fórmula\n        var registro = lista.readAt(numRegistro);\n        calcularFormula(registro);\n    };\n\n    // Grabamos los datos calculados\n    grabarCalculos();\n})();",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "AEAT-390"
			},
			{
				"ID": "AEAT-390-GEN-FIC",
				"NAME": "AEAT. Modelo 390. Generar fichero",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 390. Generar fichero\n//\n// ENERO 2017 - Revisión 20.1\n// -------------------------------------------------------------------------------\n\n//Sirven los includes del modelo 303\n\n// Ejecutamos el cálculo de los totales\ncalcularFormulaTotales();\n\n// Generamos el fichero en formato TXT\ngenerarFicheroTxt();",
				"VER_ULT_ACT": "20.1",
				"OFF": false,
				"ID_SCR": "AEAT-390-GEN-FIC"
			},
			{
				"ID": "AEAT-390-H02",
				"NAME": "AEAT. Modelo 390. Cálculo de la hoja 02",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 390. Cálculo de la hoja 02\n//\n// ENERO 2017 - Revisión 20.1\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n     //REGIMEN ORDINARIO + RECARGO DE EQUIVALENCIA\n     // Lanzamos búsqueda de IVA - FACTURAS EMTIDAS\n     // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n     var busqueda = new VQuery(theRoot);\n     busqueda.setQuery(\"verp_3_dat/FAC_EMI_C_SER_ENT_FCH\");\n     busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n     busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n     busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n     busqueda.exec();\n     lista = busqueda.result();\n\n     // Inicializamos variables\n     var baseImp_01    = 0;\n     var baseImp_03    = 0;\n     var baseImp_05    = 0;\n     var baseImp_35    = 0;\n     var baseImp_599   = 0;\n     var baseImp_601   = 0;\n\n     var cuotaDev_02   = 0;\n     var cuotaDev_04   = 0;\n     var cuotaDev_06   = 0;\n     var cuotaDev_36   = 0;\n     var cuotaDev_600  = 0;\n     var cuotaDev_602  = 0;\n\n     var reqGen        = 0;\n     var reqRed        = 0;\n     var reqSup        = 0;\n\n     if (lista.size() != 0) {\n     // Leemos cada registro de factura EMITIDA\n     for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++) {\n          var registro = lista.readAt(numRegistro);\n\n          //Se mira el registro de cada factura a qué tipo de libro de IVA Repercutido-Devengado corresponde\n          var tipoLibro = registro.fieldToString(\"SER.TIP_IVA_DEV\");\n\n          switch(tipoLibro) {\n               case \"1\":\n                    //Regiment General + Recargo de Equivalencia\n                     baseImp_01      += registro.fieldToDouble(\"BAS_SUP\");\n                     baseImp_03      += registro.fieldToDouble(\"BAS_RED\");\n                     baseImp_05      += registro.fieldToDouble(\"BAS_GEN\");\n                     reqGen          =  registro.fieldToDouble(\"REQ_GEN\");\n                     reqRed          =  registro.fieldToDouble(\"REQ_RED\");\n                     reqSup          =  registro.fieldToDouble(\"REQ_SUP\");\n                     if (reqGen != 0) { baseImp_601 += registro.fieldToDouble(\"BAS_GEN\") };\n                     if (reqRed != 0) { baseImp_599 += registro.fieldToDouble(\"BAS_RED\") };\n                     if (reqSup != 0) { baseImp_35  += registro.fieldToDouble(\"BAS_SUP\") };\n\n                     cuotaDev_02     += registro.fieldToDouble(\"IVA_SUP\");\n                     cuotaDev_04     += registro.fieldToDouble(\"IVA_RED\");\n                     cuotaDev_06     += registro.fieldToDouble(\"IVA_GEN\");\n                     cuotaDev_602    += reqGen;\n                     cuotaDev_600    += reqRed;\n                     cuotaDev_36     += reqSup;\n                    break;\n          };\n     };\n\n     // Una vez leídas todas las facturas emitidas rellenamos en cada casilla del modelo\n            \n     // Modificar registro de la HOJA 02 a partir de las etiquetas definidas en sus campos en la plantilla\n     // El registro de la HOJA 02 ya nos viene de origen\n     // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n     \n     if (baseImp_01 != 0) {\n          setEtiqueta(ficId, \"390-001\", baseImp_01);\n          setEtiqueta(ficId, \"390-002\", cuotaDev_02);\n     };\n\n     if (baseImp_03 != 0) {\n          setEtiqueta(ficId, \"390-003\", baseImp_03);\n          setEtiqueta(ficId, \"390-004\", cuotaDev_04);\n     };\n\n     if (baseImp_05 != 0) {\n          setEtiqueta(ficId, \"390-005\", baseImp_05);\n          setEtiqueta(ficId, \"390-006\", cuotaDev_06);\n     };     \n\n     setEtiqueta(ficId, \"390-033\", (baseImp_01  + baseImp_03  + baseImp_05));\n     setEtiqueta(ficId, \"390-034\", (cuotaDev_02 + cuotaDev_04 + cuotaDev_06));\n\n     if (baseImp_35 != 0) {\n          setEtiqueta(ficId, \"390-035\", baseImp_35);\n          setEtiqueta(ficId, \"390-036\", cuotaDev_36);\n     };\n\n     if (baseImp_599 != 0) {\n          setEtiqueta(ficId, \"390-599\", baseImp_599);\n          setEtiqueta(ficId, \"390-600\", cuotaDev_600);\n     };\n\n     if (baseImp_601 != 0) {\n          setEtiqueta(ficId, \"390-601\", baseImp_601);\n          setEtiqueta(ficId, \"390-602\", cuotaDev_602);\n     };\n\n     setEtiqueta(ficId, \"390-047\", (cuotaDev_02 + cuotaDev_04 + cuotaDev_06 + cuotaDev_36 + cuotaDev_600 + cuotaDev_602));\n\n     };\n\n};",
				"VER_ULT_ACT": "20.1",
				"OFF": false,
				"ID_SCR": "AEAT-390-H02"
			},
			{
				"ID": "AEAT-390-H03",
				"NAME": "AEAT. Modelo 390. Cálculo de la hoja 03",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 390. Cálculo de la hoja 03\n//\n// ENERO 2017 - Revisión 20.1\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n    // OPERACIONES INTERIORES CORRIENTES Y OPERACIONES INTERIORES DE BIENES DE INVERSION\n    // Lanzamos búsqueda de IVA - FACTURAS RECIBIDAS\n    // registroFic está seteado en el proceso javascript ejecutarScript.js del proyecto\n    busqueda = new VQuery(theRoot);\n    busqueda.setQuery(\"verp_3_dat/FAC_REC_C_SER_ENT_FCH\");\n    busqueda.setVar(\"EMP\",     registroFic.fieldToString(\"EMP\"));\n    busqueda.setVar(\"FCH_DES\", registroFic.fieldToDate(\"FCH_DES\"));\n    busqueda.setVar(\"FCH_HAS\", registroFic.fieldToDate(\"FCH_HAS\"));\n    busqueda.exec();\n    lista = busqueda.result();\n\n    // Inicializamos variables\n     var baseSop_190    = 0;\n     var baseSop_603    = 0;\n     var baseSop_605    = 0;\n     var baseSop_196    = 0;\n     var baseSop_611    = 0;\n     var baseSop_613    = 0;\n     \n     var cuotaSop_191   = 0;\n     var cuotaSop_604   = 0;\n     var cuotaSop_606   = 0;\n     var cuotaSop_197   = 0;\n     var cuotaSop_612   = 0;\n     var cuotaSop_614   = 0;\n\n\n     if (lista.size() != 0) { \n     // Leemos cada registro de factura RECIBIDA\n     for (numRegistro = 0; numRegistro < lista.size(); numRegistro++) {\n          registro = lista.readAt(numRegistro);\n\n          //Se mira el registro de cada factura a qué tipo de libro de IVA Soportado-Deducible corresponde\n          tipoLibro = registro.fieldToString(\"SER.TIP_IVA_DED\");\n\n          switch(tipoLibro) {\n               case \"1\":\n                    //Operaciones interiores corrientes\n                    baseSop_190  += registro.fieldToDouble(\"BAS_SUP\");\n                    baseSop_603  += registro.fieldToDouble(\"BAS_RED\");\n                    baseSop_605  += registro.fieldToDouble(\"BAS_GEN\");                    \n                    cuotaSop_191 += registro.fieldToDouble(\"IVA_SUP\");\n                    cuotaSop_604 += registro.fieldToDouble(\"IVA_RED\");\n                    cuotaSop_606 += registro.fieldToDouble(\"IVA_GEN\");\n                    break;\n                case \"6\":\n                    //Operaciones interiores bienes inversión\n                    baseSop_196  += registro.fieldToDouble(\"BAS_SUP\");\n                    baseSop_611  += registro.fieldToDouble(\"BAS_RED\");\n                    baseSop_613  += registro.fieldToDouble(\"BAS_GEN\");                    \n                    cuotaSop_197 += registro.fieldToDouble(\"IVA_SUP\");\n                    cuotaSop_612 += registro.fieldToDouble(\"IVA_RED\");\n                    cuotaSop_614 += registro.fieldToDouble(\"IVA_GEN\");\n                    break;\n          };\n     };\n\n     // Modificar registro de la HOJA 03 a partir de las etiquetas definidas en sus campos en la plantilla\n     // El registro de la HOJA 03 ya nos viene de origen\n     // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n     \n     if (baseSop_190 != 0) {\n          setEtiqueta(ficId, \"390-190\", baseSop_190);\n          setEtiqueta(ficId, \"390-191\", cuotaSop_191);\n     };\n\n     if (baseSop_603 != 0) {\n          setEtiqueta(ficId, \"390-603\", baseSop_603);\n          setEtiqueta(ficId, \"390-604\", cuotaSop_604);\n     };\n\n     if (baseSop_605 != 0) {\n          setEtiqueta(ficId, \"390-605\", baseSop_605);\n          setEtiqueta(ficId, \"390-606\", cuotaSop_606);\n     };\n\n     setEtiqueta(ficId, \"390-048\", (baseSop_190 + baseSop_603 + baseSop_605));\n     setEtiqueta(ficId, \"390-049\", (cuotaSop_191 + cuotaSop_604 + cuotaSop_606));\n\n     if (baseSop_196 != 0) {\n          setEtiqueta(ficId, \"390-196\", baseSop_196);\n          setEtiqueta(ficId, \"390-197\", cuotaSop_197);\n     };\n\n     if (baseSop_611 != 0) {\n          setEtiqueta(ficId, \"390-611\", baseSop_611);\n          setEtiqueta(ficId, \"390-612\", cuotaSop_612);\n     };\n\n     if (baseSop_613 != 0) {\n          setEtiqueta(ficId, \"390-613\", baseSop_613);\n          setEtiqueta(ficId, \"390-614\", cuotaSop_614);\n     };\n\n     setEtiqueta(ficId, \"390-050\", (baseSop_196 + baseSop_611 + baseSop_613));\n     setEtiqueta(ficId, \"390-051\", (cuotaSop_197 + cuotaSop_612 + cuotaSop_614));\n\n    };\n\n};",
				"VER_ULT_ACT": "20.1",
				"OFF": false,
				"ID_SCR": "AEAT-390-H03"
			},
			{
				"ID": "AEAT-390-H04",
				"NAME": "AEAT. Modelo 390. Cálculo de la hoja 04",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 390. Cálculo de la hoja 04\n//\n// ENERO 2017 - Revisión 20.1\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n     // Modificar registro de la HOJA 04 a partir de las etiquetas definidas en sus campos en la plantilla\n     // El registro de la HOJA 04 ya nos viene de origen\n     // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n\n     var cuotaIVA_47  = 0;\n     var cuotaDedu_49 = 0;\n     var cuotaDedu_51 = 0;\n\n     cuotaIVA_47  = getEtiqueta(ficId, \"390-047\");\n     cuotaDedu_49 = getEtiqueta(ficId, \"390-049\");\n     cuotaDedu_51 = getEtiqueta(ficId, \"390-051\");\n\n     setEtiqueta(ficId, \"390-064\", (cuotaDedu_49 + cuotaDedu_51));\n     setEtiqueta(ficId, \"390-065\", (cuotaIVA_47 - (cuotaDedu_49 + cuotaDedu_51)));\n\n};",
				"VER_ULT_ACT": "20.1",
				"OFF": false,
				"ID_SCR": "AEAT-390-H04"
			},
			{
				"ID": "AEAT-390-H06",
				"NAME": "AEAT. Modelo 390. Cálculo de la hoja 06",
				"SCR": "// -------------------------------------------------------------------------------\n// Modelo 390. Cálculo de la hoja 06\n//\n// ENERO 2017 - Revisión 20.1\n// -------------------------------------------------------------------------------\n\nif (registroFicReg) {\n\n     // Modificar registro de la HOJA 06 a partir de las etiquetas definidas en sus campos en la plantilla\n     // El registro de la HOJA 06 ya nos viene de origen\n     // No hay que ir creando y modificando multiregistros (caso del 340 y del 347)\n\n     var basesImp_33    = 0;\n     var rdoRegGral_65  = 0;\n     var compCuotas_85  = 0;\n\n     basesImp_33        = getEtiqueta(ficId, \"390-033\");\n     rdoRegGral_65      = getEtiqueta(ficId, \"390-065\");\n     compCuotas_85      = getEtiqueta(ficId, \"390-085\");\n     \n     setEtiqueta(ficId, \"390-084\", rdoRegGral_65);\n     setEtiqueta(ficId, \"390-086\", (rdoRegGral_65 - compCuotas_85));\n     setEtiqueta(ficId, \"390-099\", basesImp_33);\n     setEtiqueta(ficId, \"390-108\", basesImp_33);\n\n};",
				"VER_ULT_ACT": "20.1",
				"OFF": false,
				"ID_SCR": "AEAT-390-H06"
			},
			{
				"ID": "VTA-FAC-TKT-BAI-GIP",
				"NAME": "Emitir TicketBai (Gipuzkoa)",
				"SCR": "\nvar ficheroXML = generarXMLBizkaia();\nvar datosPartner = devolverDatosPartner();\nguardarFicheroDisco( theApp.clientCachePath() + \"Factura_\" + theRegisterIn.fieldToInt(\"ID\") + \".xml\", ficheroXML, false);\n\nvar cuerpoJSON = generarJsonParaFirmar(\"A\", \"0\", \"20\", theApp.clientCachePath() + \"Factura_\" + theRegisterIn.fieldToInt(\"ID\") + \".xml\", theApp.clientCachePath() + \"CER_PRUEBA.p12\", \"IZDesa2021\", 0);\n\n//Realizamos un PIN para ver si el servidor esta online\nvar vrlConexion = datosPartner.vrlConexion;\nvar instanciaConexion = datosPartner.instanciaConexion;\nvar usuarioConexion = datosPartner.usuarioConexion;\nvar claveConexion = datosPartner.claveConexion;\n\nvar activoServidorPrincipal = theRoot.calcFormulaVelneo(\"rfc:TKT_BAI_PIN(\\\"\"+vrlConexion+\"\\\",\\\"\"+instanciaConexion+\"\\\",\\\"\"+usuarioConexion+\"\\\",\\\"\"+claveConexion+\"\\\")\");\nvar activoServidorAlterno = 0;\n\nif( activoServidorPrincipal != \"1\" ){\n\tvrlConexion = datosPartner.vrlConexionAlterna;\n\tinstanciaConexion = datosPartner.instanciaConexionAlterna;\n\tusuarioConexion = datosPartner.usuarioConexionAlterna;\n\tclaveConexion = datosPartner.claveConexionAlterna;\n\tactivoServidorAlterno = theRoot.calcFormulaVelneo(\"rfc:TKT_BAI_PIN(\\\"\"+vrlConexion+\"\\\",\\\"\"+instanciaConexion+\"\\\",\\\"\"+usuarioConexion+\"\\\",\\\"\"+claveConexion+\"\\\")\");\n}\n\nif( activoServidorPrincipal || activoServidorAlterno ){\n\t//Enviamos a firmar el XML\n\tvar contenido = new VByteArray();\n\tcontenido.setText( JSON.stringify(cuerpoJSON) );\t\n\t\n\tvar retornoFirma = theRoot.calcFormulaVelneo(\"rfc:TKT_BAI_FIR_DOC(\\\"\"+vrlConexion+\"\\\",\\\"\"+instanciaConexion+\"\\\",\\\"\"+usuarioConexion+\"\\\",\\\"\"+claveConexion+\"\\\",\\\"\"+contenido.compress().toBase64().toLatin1String()+\"\\\")\");\n\tvar objetoRetorno = JSON.parse(retornoFirma);\n\t\n\tif( objetoRetorno.Resultado ){\n\t\t//guardamos el fichero en disco\n\t\tguardarFicheroDisco( theApp.clientCachePath() + \"Factura_\" + theRegisterIn.fieldToInt(\"ID\") + \".xsig\", objetoRetorno.Base64 , true );\n\t\t//guardamos los datos en la ficha\n\t\tguardarDatosFactura(objetoRetorno);\t\t\n\t\t//Preparamos el JSON para enviar\t\t\n\t\tcuerpoJSON = generarJsonParaEnviar(\"A\", \"0\", \"20\", objetoRetorno.Base64, theApp.clientCachePath() + \"CER_PRUEBA.p12\", \"IZDesa2021\", objetoRetorno.IdRegistro);\n\t\t//Enviamos a hacienda\n\t\tcontenido = new VByteArray();\n\t\tcontenido.setText( JSON.stringify(cuerpoJSON) );\n\t\tvar retornoEnvio = theRoot.calcFormulaVelneo(\"rfc:TKT_BAI_ENV_DOC(\\\"\"+vrlConexion+\"\\\",\\\"\"+instanciaConexion+\"\\\",\\\"\"+usuarioConexion+\"\\\",\\\"\"+claveConexion+\"\\\",\\\"\"+contenido.compress().toBase64().toLatin1String()+\"\\\")\");\n\t\talert( retornoEnvio);\n\t\t\n\t}else{\n\t\talert( objetoRetorno.DescripcionError );\n\t}\n\t\n\t//guardarFicheroDisco( theApp.clientCachePath() + \"Factura_\" + theRegisterIn.fieldToInt(\"ID\") + \".xsig\", objetoRetorno.Base64 , true );\n\t//alert(retornoFirma);\n}else{\n\talert(\"El conector del partner no esta disponible\");\n}",
				"VER_ULT_ACT": "32.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "VTA-FAC-ENV-NOT",
				"NAME": "Enviar notificacion de factura de venta",
				"SCR": "//-------------------------------------------------------\n//URL del WebHook al cual enviaremos la notificacion\n//-------------------------------------------------------\n\nvar urlWebHook = \"https://hook.eu1.make.com/8x1b2oeoeixdbb4vqnoorg3at7gicchf\";\n\nvar emailID = theRoot.varToInt(\"EML_ID\");\n\n//Cargamos el registro de mail para tomar sus datos\nvar registro = new VRegister( theRoot );\nregistro.setTable(\"verp_3_dat/EML_W\");\nregistro.readRegister(\"ID\",[emailID],VRegister.SearchThis);\n\nvar sendaFichero = theRoot.varToString(\"SND\")\n\n//Preparamos el JSON\nvar oJson = prepararObjetoJson( registro, sendaFichero );\n\nvar resultado = enviarNotificacion( urlWebHook, JSON.stringify(oJson));\n\nif( resultado == \"Accepted\" ){\n     theRoot.setVar(\"ENVIO\",\"1\");\n     guardarResultadoEnvio(emailID, true, \"\");\n}else{\n     theRoot.setVar(\"LOG\",resultado);\n     guardarResultadoEnvio(emailID, false, resultado);\n}\n",
				"VER_ULT_ACT": "32.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "VTA-FAC-ENV-NOT-ENV",
				"NAME": "Envio de notificaciones de factura venta",
				"SCR": "importClass( \"XMLHttpRequest\" );\n\n//---------------------------------------------------------------\n//Funcion que envia al WebHook el body indicado\n//---------------------------------------------------------------\nfunction enviarNotificacion( urlEnvio, body ){\n\n     if( urlEnvio == \"\"){\n         alert(\"No ha definido la URL del WebHook a utilizar\");\n         return \"No ha definido la URL del WebHook a utilizar\";\n     }else{\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"POST\", urlEnvio, false);\n          xhr.setRequestHeader(\"Content-Type\",\"application/json\");\n          xhr.setRequestHeader(\"Accept\",\"*/*\");\n          xhr.setRequestHeader(\"Accept-Encoding\",\"gzip, deflate, br\");\n          xhr.setRequestHeader(\"Content-Type\",\"application/json\");\n          xhr.send( body );\n\n          return xhr.responseText;\n     }\n\n     \n}",
				"VER_ULT_ACT": "31.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "FUN-GEN",
				"NAME": "Funciones generales",
				"SCR": "// -------------------------------------------------------------------------------\n// Funciones generales\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------------\n// Actualizar la descripción del registro (multiregistro) en función de la fórmula\n// -------------------------------------------------------------------------------\nfunction actualizarDescripcion(nuevoRegistroFicReg)\n{\n    // Preparamos los valores iniciales\n    var descripcion = parametros.descripcion;\n    var numRegistro = nuevoRegistroFicReg.fieldToInt(\"NUM_REG\");\n\n    // Recorremos las etiquetas conformando la descripcion\n    for (numEtiqueta = 0; numEtiqueta < parametros.etiquetasDescripcion.length; numEtiqueta++)\n    {\n        var etiquetaTag     = parametros.etiquetasDescripcion[numEtiqueta].tag;\n        var etiquetaId      = parametros.etiquetasDescripcion[numEtiqueta].id;\n        var etiquetaFormato = parametros.etiquetasDescripcion[numEtiqueta].formato; \n        var etiquetaValor   = getEtiqueta(ficId, etiquetaId + \"-\" + (\"000000\" + numRegistro).slice (-6));\n        if (etiquetaFormato != undefined)\n            etiquetaValor   = convertirFecha(etiquetaValor, etiquetaFormato); \n        descripcion         = descripcion.replace(etiquetaTag, etiquetaValor);\n    }\n\n    // Actualizamos la descripción en el registro\n    var nuevoRegistro = new VRegister(theRoot);\n    nuevoRegistro.setTable(\"verp_3_dat/FIC_REG_W\");\n    nuevoRegistro.readRegister(\"ID\", [nuevoRegistroFicReg.fieldToInt(\"ID\")], VRegister.SearchThis); \n    nuevoRegistro.setField(\"DSC_REG\", descripcion);\n    nuevoRegistro.modifyRegister();\n}\n\n\n// ------------------------------------------------------------\n// Alta de un registro en base a la plantilla del multiregistro\n// ------------------------------------------------------------\nfunction altaRegistroCampos()\n{\n    // Crear nuevo registro de fichero (Multiregistro)\n    var registroNuevo = new VRegister(theRoot);\n    registroNuevo.setTable(\"verp_3_dat/FIC_REG_W\");\n    registroNuevo.setField(\"FIC\",         registroFicReg.fieldToInt(\"FIC\"));\n    registroNuevo.setField(\"FIC_REG_PAD\", registroFicReg.fieldToInt(\"ID\"));\n    registroNuevo.setField(\"PLF\",         registroFicReg.fieldToString(\"PLF\"));\n    registroNuevo.setField(\"NUM_REG\",     registroFicReg.fieldToInt(\"ULT_FIC_REG_HIJ.NUM_REG\") + 1);\n    registroNuevo.addRegister();\n\n    // Recorrer los campos de la plantilla\n    for (var numCampo = 0; numCampo < listaCampos.size(); numCampo++)\n    {\n        var registroCampo      = listaCampos.readAt(numCampo);\n        var registroCampoNuevo = new VRegister(theRoot);\n        registroCampoNuevo.setTable(\"verp_3_dat/FIC_REG_W\");\n        registroCampoNuevo.setField(\"FIC\",         registroNuevo.fieldToInt(\"FIC\"));\n        registroCampoNuevo.setField(\"FIC_REG_PAD\", registroNuevo.fieldToInt(\"ID\"));\n        registroCampoNuevo.setField(\"PLF\",         registroCampo.fieldToString(\"ID\"));\n        registroCampoNuevo.setField(\"NUM_REG\",     registroNuevo.fieldToInt(\"NUM_REG\"));\n\n        // Si la plantilla tiene definido el tipo de cálculo fórmula se ejecuta\n        if (registroCampoNuevo.fieldToString(\"PLF.PLF_TIP_CAL\") == \"F\")\n        {\n            // Se modifica el valor del campo en función del tipo\n            var tipoCampo = registroCampoNuevo.fieldToString(\"PLF.PLF_TIP_CAM\");\n            var valor     = registroCampoNuevo.calcDynamicFormula(\"PLF.FOR\");\n            switch(tipoCampo)\n            {\n                case \"N\":\n                case \"S\":\n                    registroCampoNuevo.setField(\"VAL_CAL\", valor);\n                    break;\n\n                case \"A\":\n                case \"F\":\n                    registroCampoNuevo.setField(\"TXT_CAL\", valor);\n                    break;\n\n                case \"D\":\n                    registroCampoNuevo.setField(\"FCH_CAL\", valor);\n                    break;\n            };            \n        };\n\n        // Grabamos el nuevo registro\n        registroCampoNuevo.addRegister();\n    };\n\n    // Retornamos el nº registro generado\n    return registroNuevo;\n};\n\n// ---------------------------\n// Parte derecha de una cadena\n// ---------------------------\nfunction cadenaDch(str, n)\n{\n    if (n <= 0)\n       return \"\";\n    else if (n > String(str).length)\n       return str;\n    else\n    {\n      var iLen = String(str).length;\n      return String(str).substring(iLen, iLen - n);\n    } \n};\n\n// -----------------------------\n// Parte izquierda de una cadena\n// -----------------------------\nfunction cadenaIzq(str, n)\n{\n    if (n <= 0)\n       return \"\";\n    else if (n > String(str).length)\n       return str;\n    else\n      return String(str).substring(0,n);\n};\n\n\n// ----------------------------------------------------------------------------------------\n// Calcular valores en función de las condiciones y acumuladores configurados en la fórmula\n// ----------------------------------------------------------------------------------------\nfunction calcularFormula(registro)\n{\n    for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n    {\n        if (eval(parametros.calculos[numCalculo].condicion) == true) {\n            var valor = parametros.calculos[numCalculo].valor;\n            valor += registro.fieldToDouble(parametros.calculos[numCalculo].acumular);\n            parametros.calculos[numCalculo].valor = valor;\n        };\n    };\n};\n\n\n// ----------------------------------------------------------------------------------------\n// Calcular valores en función de las condiciones y acumuladores configurados en la fórmula\n// ----------------------------------------------------------------------------------------\nfunction calcularFormulaTotales()\n{\n    if (parametros != undefined)\n    {\n        // Inicializamos el valor de las etiquetas de cálculo a cero para permitir múltiples cálculos sobre la misma etiqueta\n        inicializarValorEtiquetasCalculos()\n\n        // Recorremos los cálculos\n        for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n        {\n            // Leemos los registros de fichero de la etiquetaPrefijo de la fórmula\n            var busqueda = new VQuery(theRoot);\n            busqueda.setQuery(\"verp_3_app/FIC_REG_W_ETQ\");\n            busqueda.setVar(\"FIC\",     ficId);\n            busqueda.setVar(\"ETQ_DES\", parametros.calculos[numCalculo].etiquetaPrefijo + \"-000000\");\n            busqueda.setVar(\"ETQ_HAS\", parametros.calculos[numCalculo].etiquetaPrefijo + \"-999999\");\n            busqueda.exec();\n            lista = busqueda.result();\n\n            switch(parametros.calculos[numCalculo].tipo)\n            {\n                case \"count\":\n                    // Si el tipo de cálculo es count, asumimos el tamaño de la lista\n                    parametros.calculos[numCalculo].valor = lista.size();\n                    break;\n\n                case \"sum\":\n                    // Si el tipo es sum, calculamos el valor a partir del campo a acumular\n                    var valor = 0;\n                    for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++)\n                    {\n                        var registro = lista.readAt(numRegistro);\n                        valor       += registro.fieldToDouble(\"VAL_CAL\");\n                    }\n                    parametros.calculos[numCalculo].valor = valor;\n                    break;\n            }; \n        };\n\n        // Grabamos los datos calculados\n        var noSumar = true;\n        grabarCalculos();\n    };\n};\n\n\n// --------------------------------------\n// Cargar lista de registros de una tabla\n// --------------------------------------\nfunction cargarLista(tablaIdRef, indice, claves)\n{\n    var lista = new VRegisterList(theRoot);\n    lista.setTable(\"verp_3_dat/FAC_EMI_C\");\n    lista.load(indice, claves);\n    return lista;\n};\n\n\n\n// --------------------------------------------\n// Compone número positivo o con signo negativo\n// --------------------------------------------\nfunction componeNumero(valor, tipoCampo, longitudEntero, longitudDecimal)\n{\n    var retorno         = \"\";\n    var digitoPositivo  = parametros.fichero.digitoPositivo;\n    var digitoNegativo  = parametros.fichero.digitoNegativo;\n    var numeroCeros     = \"000000000000000000000000000\"\n\n    var absoluto = Math.abs(valor); \n    var entero   = Math.floor(absoluto);\n    var decimal  = Math.round((absoluto - entero) * Math.pow(10,longitudDecimal)) / Math.pow(10,longitudDecimal);\n    var decimal  = decimal * Math.pow(10,longitudDecimal);\n    if ((longitudDecimal!=0) & (decimal!=0)) var decimal  = decimal.toPrecision(longitudDecimal);\n\n    function ceros(dato)\n    {\n        return (dato < 10) ? '0' + dato : dato;\n    };\n\n    if (tipoCampo == \"S\")\n    {\n        if (valor < 0)\n            retorno = digitoNegativo + cadenaDch((numeroCeros + \"\" + entero), (longitudEntero - 1)) + \"\" + cadenaIzq((ceros(decimal) + \"\" + numeroCeros), (longitudDecimal));\n        else\n            retorno = digitoPositivo + cadenaDch((numeroCeros + \"\" + entero),(longitudEntero - 1)) + \"\" + cadenaIzq((ceros(decimal) + \"\" + numeroCeros), (longitudDecimal));\n    }\n    else\n    {\n        retorno = cadenaDch((numeroCeros + \"\" + entero),(longitudEntero)) + \"\" + cadenaIzq((ceros(decimal) + \"\" + numeroCeros), (longitudDecimal));\n    };\n\n    return (retorno); \n}\n\n\n// -------------------------\n// Convertir fecha a formato\n// -------------------------\nfunction convertirFecha(fechaEntrada, formato)\n{\n    var fechaFormato = \"\";\n\n    if (isNaN(fechaEntrada.getFullYear()) == false)\n    {\n        function ceros(dato)\n        {\n            return (dato < 10) ? '0' + dato : dato;\n        };\n\n        var fecha = new Date(fechaEntrada);\n\n        switch(formato)\n        {\n            case \"dd/mm/aaaa\":\n                fechaFormato = [ceros(fecha.getDate()), ceros(fecha.getMonth()+1), fecha.getFullYear()].join('/');\n                break;\n\n            case \"mm/dd/aaaa\":\n                fechaFormato = [ceros(fecha.getMonth()+1), ceros(fecha.getDate()), fecha.getFullYear()].join('/');\n                break;\n\n            case \"aaaa/mm/dd\":\n                fechaFormato = [fecha.getFullYear(), ceros(fecha.getMonth()+1), ceros(fecha.getDate())].join('/');\n                break;\n\n            case \"aaaammdd\":\n                fechaFormato = \"\" + fecha.getFullYear() + ceros(fecha.getMonth()+1) + ceros(fecha.getDate());\n                break;\n        };\n    }\n    else\n    {\n        var fechaFormato = new Array(formato.length + 1).join(\"0\");\n    }\n\n    return fechaFormato;\n};\n\n\n\n\n// ----------------------\n// Leer valor de etiqueta\n// ----------------------\nfunction getEtiqueta(ficId, etiqueta)\n{\n    // Preparamos la variables de retorno y leemos el registro de la etiqueta\n    var valorRetorno = \"\";\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n\n    // Leemos el registro de la etiqueta\n    registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n    if (registroEtiqueta)\n    {\n        // En función del tipo de campo devolvemos el valor numérico o alfabético\n        var tipoCampo = registroEtiqueta.fieldToString(\"PLF.PLF_TIP_CAM\");\n        switch(tipoCampo)\n        {\n            case \"N\":\n            case \"S\":\n                valorRetorno = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n                break;\n\n            case \"A\":\n            case \"F\":\n                valorRetorno = registroEtiqueta.fieldToString(\"TXT_CAL\");\n                break;\n                \n            case \"D\":\n                valorRetorno = registroEtiqueta.fieldToDate(\"FCH_CAL\");\n                break;\n        };\n    };\n\n    // Retornamos el valor de la etiqueta o vacío si no se ha encontrado\n    return valorRetorno;\n};\n\n\n// -----------------------------------------------------------\n// Grabamos los datos calculados en el registro de la etiqueta\n// -----------------------------------------------------------\nfunction grabarCalculos(noSumar)\n{\n    // Si no recibimos el parámetros noSumar asumimos que es false\n    noSumar || (noSumar = false);\n\n    // Recorremos los cálculos realizados y grabamos el valor calculado en el registro de la etiqueta\n    for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n    {\n        var etiqueta = parametros.calculos[numCalculo].etiqueta;\n        var valor    = parametros.calculos[numCalculo].valor;\n        setEtiqueta(ficId, etiqueta, valor, noSumar);\n    };\n};\n\n\n// ----------------------------------------------------\n// Inicializar los valores de las etiquetas de cálculos\n// ----------------------------------------------------\nfunction inicializarValorEtiquetasCalculos()\n{\n    // Recorremos los cálculos realizados y ponemos a cero su valor\n    for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n    {\n        var etiqueta = parametros.calculos[numCalculo].etiqueta;\n        var noSumar  = true;\n        setEtiqueta(ficId, etiqueta, 0, noSumar);\n    };\n};\n\n\n// --------------------------\n// Acumular valor en etiqueta\n// --------------------------\nfunction setEtiqueta(ficId, etiqueta, valor, noSumar)\n{\n    // Si no recibimos el parámetros noSumar asumimos que es false\n    noSumar || (noSumar = false);\n\n    // Preparar el registro de la etiqueta a leer\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n    var claves = [];\n\n    // Leemos el registro de la etiqueta\n    registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n    if (registroEtiqueta)\n    {\n        // Se modifica el valor del campo en función del tipo\n        var tipoCampo = registroEtiqueta.fieldToString(\"PLF.PLF_TIP_CAM\");\n        switch(tipoCampo)\n        {\n            case \"N\":\n            case \"S\":\n                var valorEtiqueta = 0;\n                if (noSumar == false)\n                    var valorEtiqueta = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n                registroEtiqueta.setField(\"VAL_CAL\", valorEtiqueta + valor);\n                break;\n\n            case \"A\":\n            case \"F\":\n                registroEtiqueta.setField(\"TXT_CAL\", valor);\n                break;\n\n            case \"D\":\n                registroEtiqueta.setField(\"FCH_CAL\", valor);\n                break;\n        };\n\n        // Se modifica el registro\n        registroEtiqueta.modifyRegister();\n    };\n};\n\n\n// --------------------------\n// Sumar valores de etiquetas\n// --------------------------\nfunction sumaEtiquetas(etiquetas)\n{\n    // Preparamos las variables y el registro para la lectura de los valores de las etiquetas\n    var suma             = 0;\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n\n    // Recorremos las etiquetas recibidas\n    for (var numEtiqueta = 0; numEtiqueta < etiquetas.length; numEtiqueta++)\n    {\n        // Leemos la etiqueta y analizamos si incluye signo menos para restar el valor\n        var etiqueta = etiquetas[numEtiqueta];\n        var signo    = \"\";\n        if (etiqueta.substring(0, 1) == \"-\")\n        {\n            etiqueta = etiqueta.substring(1);\n            signo    = \"N\";\n        };\n\n        // Leemos el registro de la etiqueta\n        registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n        if (registroEtiqueta)\n        {\n            // Leemos el valor de la etiqueta y lo sumamos o restamos en función del signo\n            var valor = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n            if (signo = \"N\")\n                suma -= valor;\n            else\n                suma += valor;\n            };\n        };\n\n    // Retornamos el valor calculado\n    return suma;\n};\n",
				"VER_ULT_ACT": "26.0",
				"OFF": false,
				"ID_SCR": "FUN-GEN"
			},
			{
				"ID": "FUN-GEN-AEAT-303",
				"NAME": "Funciones generales (AEAT 303)",
				"SCR": "// -------------------------------------------------------------------------------\n// Funciones generales. Modelo 303\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------------\n// Actualizar la descripción del registro (multiregistro) en función de la fórmula\n// -------------------------------------------------------------------------------\nfunction actualizarDescripcion(nuevoRegistroFicReg)\n{\n    // Preparamos los valores iniciales\n    var descripcion = parametros.descripcion;\n    var numRegistro = nuevoRegistroFicReg.fieldToInt(\"NUM_REG\");\n\n    // Recorremos las etiquetas conformando la descripcion\n    for (numEtiqueta = 0; numEtiqueta < parametros.etiquetasDescripcion.length; numEtiqueta++)\n    {\n        var etiquetaTag     = parametros.etiquetasDescripcion[numEtiqueta].tag;\n        var etiquetaId      = parametros.etiquetasDescripcion[numEtiqueta].id;\n        var etiquetaFormato = parametros.etiquetasDescripcion[numEtiqueta].formato; \n        var etiquetaValor   = getEtiqueta(ficId, etiquetaId + \"-\" + (\"000000\" + numRegistro).slice (-6));\n        if (etiquetaFormato != undefined)\n            etiquetaValor   = convertirFecha(etiquetaValor, etiquetaFormato); \n        descripcion         = descripcion.replace(etiquetaTag, etiquetaValor);\n    }\n\n    // Actualizamos la descripción en el registro\n    var nuevoRegistro = new VRegister(theRoot);\n    nuevoRegistro.setTable(\"verp_3_dat/FIC_REG_W\");\n    nuevoRegistro.readRegister(\"ID\", [nuevoRegistroFicReg.fieldToInt(\"ID\")], VRegister.SearchThis); \n    nuevoRegistro.setField(\"DSC_REG\", descripcion);\n    nuevoRegistro.modifyRegister();\n}\n\n\n// ------------------------------------------------------------\n// Alta de un registro en base a la plantilla del multiregistro\n// ------------------------------------------------------------\nfunction altaRegistroCampos()\n{\n    // Crear nuevo registro de fichero (Multiregistro)\n    var registroNuevo = new VRegister(theRoot);\n    registroNuevo.setTable(\"verp_3_dat/FIC_REG_W\");\n    registroNuevo.setField(\"FIC\",         registroFicReg.fieldToInt(\"FIC\"));\n    registroNuevo.setField(\"FIC_REG_PAD\", registroFicReg.fieldToInt(\"ID\"));\n    registroNuevo.setField(\"PLF\",         registroFicReg.fieldToInt(\"PLF\"));\n    registroNuevo.setField(\"NUM_REG\",     registroFicReg.fieldToInt(\"ULT_FIC_REG_HIJ.NUM_REG\") + 1);\n    registroNuevo.addRegister();\n\n    // Recorrer los campos de la plantilla\n    for (var numCampo = 0; numCampo < listaCampos.size(); numCampo++)\n    {\n        var registroCampo      = listaCampos.readAt(numCampo);\n        var registroCampoNuevo = new VRegister(theRoot);\n        registroCampoNuevo.setTable(\"verp_3_dat/FIC_REG_W\");\n        registroCampoNuevo.setField(\"FIC\",         registroNuevo.fieldToInt(\"FIC\"));\n        registroCampoNuevo.setField(\"FIC_REG_PAD\", registroNuevo.fieldToInt(\"ID\"));\n        registroCampoNuevo.setField(\"PLF\",         registroCampo.fieldToInt(\"ID\"));\n        registroCampoNuevo.setField(\"NUM_REG\",     registroNuevo.fieldToInt(\"NUM_REG\"));\n\n        // Si la plantilla tiene definido el tipo de cálculo fórmula se ejecuta\n        if (registroCampoNuevo.fieldToString(\"PLF.PLF_TIP_CAL\") == \"F\")\n        {\n            // Se modifica el valor del campo en función del tipo\n            var tipoCampo = registroCampoNuevo.fieldToString(\"PLF.PLF_TIP_CAM\");\n            var valor     = registroCampoNuevo.calcDynamicFormula(\"PLF.FOR\");\n            switch(tipoCampo)\n            {\n                case \"N\":\n                case \"S\":\n                    registroCampoNuevo.setField(\"VAL_CAL\", valor);\n                    break;\n\n                case \"A\":\n                case \"F\":\n                    registroCampoNuevo.setField(\"TXT_CAL\", valor);\n                    break;\n\n                case \"D\":\n                    registroCampoNuevo.setField(\"FCH_CAL\", valor);\n                    break;\n            };            \n        };\n\n        // Grabamos el nuevo registro\n        registroCampoNuevo.addRegister();\n    };\n\n    // Retornamos el nº registro generado\n    return registroNuevo;\n};\n\n// ---------------------------\n// Parte derecha de una cadena\n// ---------------------------\nfunction cadenaDch(str, n)\n{\n    if (n <= 0)\n       return \"\";\n    else if (n > String(str).length)\n       return str;\n    else\n    {\n      var iLen = String(str).length;\n      return String(str).substring(iLen, iLen - n);\n    } \n};\n\n// -----------------------------\n// Parte izquierda de una cadena\n// -----------------------------\nfunction cadenaIzq(str, n)\n{\n    if (n <= 0)\n       return \"\";\n    else if (n > String(str).length)\n       return str;\n    else\n      return String(str).substring(0,n);\n};\n\n\n// ----------------------------------------------------------------------------------------\n// Calcular valores en función de las condiciones y acumuladores configurados en la fórmula\n// ----------------------------------------------------------------------------------------\nfunction calcularFormula(registro)\n{\n    for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n    {\n        if (eval(parametros.calculos[numCalculo].condicion) == true) {\n            var valor = parametros.calculos[numCalculo].valor;\n            valor += registro.fieldToDouble(parametros.calculos[numCalculo].acumular);\n            parametros.calculos[numCalculo].valor = valor;\n        };\n    };\n};\n\n\n// ----------------------------------------------------------------------------------------\n// Calcular valores en función de las condiciones y acumuladores configurados en la fórmula\n// ----------------------------------------------------------------------------------------\nfunction calcularFormulaTotales()\n{\n    if (parametros != undefined)\n    {\n        // Inicializamos el valor de las etiquetas de cálculo a cero para permitir múltiples cálculos sobre la misma etiqueta\n        inicializarValorEtiquetasCalculos()\n\n        // Recorremos los cálculos\n        for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n        {\n            // Leemos los registros de fichero de la etiquetaPrefijo de la fórmula\n            var busqueda = new VQuery(theRoot);\n            busqueda.setQuery(\"verp_3_app/FIC_REG_W_ETQ\");\n            busqueda.setVar(\"FIC\",     ficId);\n            busqueda.setVar(\"ETQ_DES\", parametros.calculos[numCalculo].etiquetaPrefijo + \"\");\n            busqueda.setVar(\"ETQ_HAS\", parametros.calculos[numCalculo].etiquetaPrefijo + \"\");\n            busqueda.exec();\n            lista = busqueda.result();\n\n            switch(parametros.calculos[numCalculo].tipo)\n            {\n                case \"count\":\n                    // Si el tipo de cálculo es count, asumimos el tamaño de la lista\n                    parametros.calculos[numCalculo].valor = lista.size();\n                    break;\n\n                case \"sum\":\n                    // Si el tipo es sum, calculamos el valor a partir del campo a acumular\n                    var valor = 0;\n                    for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++)\n                    {\n                        var registro = lista.readAt(numRegistro);\n                        valor       += registro.fieldToDouble(\"VAL_CAL\");\n                    }\n                    parametros.calculos[numCalculo].valor = valor;\n                    break;\n\n                case \"rest\":\n                    // Si el tipo es rest, calculamos el valor a partir del campo a desacumular\n                    var valor = 0;\n                    for (var numRegistro = 0; numRegistro < lista.size(); numRegistro++)\n                    {\n                        var registro = lista.readAt(numRegistro);\n                        valor       -= registro.fieldToDouble(\"VAL_CAL\");\n                    }\n                    parametros.calculos[numCalculo].valor = valor;\n                    break;\n            }; \n        };\n\n        // Grabamos los datos calculados\n        var noSumar = true;\n        grabarCalculos();\n    };\n};\n\n\n// --------------------------------------\n// Cargar lista de registros de una tabla\n// --------------------------------------\nfunction cargarLista(tablaIdRef, indice, claves)\n{\n    var lista = new VRegisterList(theRoot);\n    lista.setTable(\"verp_3_dat/FAC_EMI_C\");\n    lista.load(indice, claves);\n    return lista;\n};\n\n\n\n// --------------------------------------------\n// Compone número positivo o con signo negativo\n// --------------------------------------------\nfunction componeNumero(valor, tipoCampo, longitudEntero, longitudDecimal)\n{\n    var retorno         = \"\";\n    var digitoPositivo  = parametros.fichero.digitoPositivo;\n    var digitoNegativo  = parametros.fichero.digitoNegativo;\n    var numeroCeros     = \"000000000000000000000000000\"\n\n    var absoluto = Math.abs(valor); \n    var entero   = Math.floor(absoluto);\n    var decimal  = Math.round((absoluto - entero) * Math.pow(10,longitudDecimal)) / Math.pow(10,longitudDecimal);\n    var decimal  = decimal * Math.pow(10,longitudDecimal);\n    if ((longitudDecimal!=0) & (decimal!=0)) var decimal  = decimal.toPrecision(longitudDecimal);\n\n    function ceros(dato)\n    {\n        return (dato < 10) ? '0' + dato : dato;\n    };\n\n    if (tipoCampo == \"S\")\n    {\n        if (valor < 0)\n            retorno = digitoNegativo + cadenaDch((numeroCeros + \"\" + entero), (longitudEntero - 1)) + \"\" + cadenaIzq((ceros(decimal) + \"\" + numeroCeros), (longitudDecimal));\n        else\n            retorno = digitoPositivo + cadenaDch((numeroCeros + \"\" + entero),(longitudEntero - 1)) + \"\" + cadenaIzq((ceros(decimal) + \"\" + numeroCeros), (longitudDecimal));\n    }\n    else\n    {\n        retorno = cadenaDch((numeroCeros + \"\" + entero),(longitudEntero)) + \"\" + cadenaIzq((ceros(decimal) + \"\" + numeroCeros), (longitudDecimal));\n    };\n\n    return (retorno); \n}\n\n\n// -------------------------\n// Convertir fecha a formato\n// -------------------------\nfunction convertirFecha(fechaEntrada, formato)\n{\n    var fechaFormato = \"\";\n\n    if (isNaN(fechaEntrada.getFullYear()) == false)\n    {\n        function ceros(dato)\n        {\n            return (dato < 10) ? '0' + dato : dato;\n        };\n\n        var fecha = new Date(fechaEntrada);\n\n        switch(formato)\n        {\n            case \"dd/mm/aaaa\":\n                fechaFormato = [ceros(fecha.getDate()), ceros(fecha.getMonth()+1), fecha.getFullYear()].join('/');\n                break;\n\n            case \"mm/dd/aaaa\":\n                fechaFormato = [ceros(fecha.getMonth()+1), ceros(fecha.getDate()), fecha.getFullYear()].join('/');\n                break;\n\n            case \"aaaa/mm/dd\":\n                fechaFormato = [fecha.getFullYear(), ceros(fecha.getMonth()+1), ceros(fecha.getDate())].join('/');\n                break;\n\n            case \"aaaammdd\":\n                fechaFormato = \"\" + fecha.getFullYear() + ceros(fecha.getMonth()+1) + ceros(fecha.getDate());\n                break;\n        };\n    }\n    else\n    {\n        var fechaFormato = new Array(formato.length + 1).join(\"0\");\n    }\n\n    return fechaFormato;\n};\n\n\n\n\n// ----------------------\n// Leer valor de etiqueta\n// ----------------------\nfunction getEtiqueta(ficId, etiqueta)\n{\n    // Preparamos la variables de retorno y leemos el registro de la etiqueta\n    var valorRetorno = \"\";\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n\n    // Leemos el registro de la etiqueta\n    registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n    if (registroEtiqueta)\n    {\n        // En función del tipo de campo devolvemos el valor numérico o alfabético\n        var tipoCampo = registroEtiqueta.fieldToString(\"PLF.PLF_TIP_CAM\");\n        switch(tipoCampo)\n        {\n            case \"N\":\n            case \"S\":\n                valorRetorno = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n                break;\n\n            case \"A\":\n            case \"F\":\n                valorRetorno = registroEtiqueta.fieldToString(\"TXT_CAL\");\n                break;\n                \n            case \"D\":\n                valorRetorno = registroEtiqueta.fieldToDate(\"FCH_CAL\");\n                break;\n        };\n    };\n\n    // Retornamos el valor de la etiqueta o vacío si no se ha encontrado\n    return valorRetorno;\n};\n\n\n// -----------------------------------------------------------\n// Grabamos los datos calculados en el registro de la etiqueta\n// -----------------------------------------------------------\nfunction grabarCalculos(noSumar)\n{\n    // Si no recibimos el parámetros noSumar asumimos que es false\n    noSumar || (noSumar = false);\n\n    // Recorremos los cálculos realizados y grabamos el valor calculado en el registro de la etiqueta\n    for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n    {\n        var etiqueta = parametros.calculos[numCalculo].etiqueta;\n        var valor    = parametros.calculos[numCalculo].valor;\n        setEtiqueta(ficId, etiqueta, valor, noSumar);\n    };\n};\n\n\n// ----------------------------------------------------\n// Inicializar los valores de las etiquetas de cálculos\n// ----------------------------------------------------\nfunction inicializarValorEtiquetasCalculos()\n{\n    // Recorremos los cálculos realizados y ponemos a cero su valor\n    for (var numCalculo = 0; numCalculo < parametros.calculos.length; numCalculo++)\n    {\n        var etiqueta = parametros.calculos[numCalculo].etiqueta;\n        var noSumar  = true;\n        setEtiqueta(ficId, etiqueta, 0, noSumar);\n    };\n};\n\n\n// --------------------------\n// Acumular valor en etiqueta\n// --------------------------\nfunction setEtiqueta(ficId, etiqueta, valor, noSumar)\n{\n    // Si no recibimos el parámetros noSumar asumimos que es false\n    noSumar || (noSumar = false);\n\n    // Preparar el registro de la etiqueta a leer\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n    var claves = [];\n\n    // Leemos el registro de la etiqueta\n    registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n    if (registroEtiqueta)\n    {\n        // Se modifica el valor del campo en función del tipo\n        var tipoCampo = registroEtiqueta.fieldToString(\"PLF.PLF_TIP_CAM\");\n        switch(tipoCampo)\n        {\n            case \"N\":\n            case \"S\":\n                var valorEtiqueta = 0;\n                if (noSumar == false)\n                    var valorEtiqueta = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n                registroEtiqueta.setField(\"VAL_CAL\", valorEtiqueta + valor);\n                break;\n\n            case \"A\":\n            case \"F\":\n                registroEtiqueta.setField(\"TXT_CAL\", valor);\n                break;\n\n            case \"D\":\n                registroEtiqueta.setField(\"FCH_CAL\", valor);\n                break;\n        };\n\n        // Se modifica el registro\n        registroEtiqueta.modifyRegister();\n    };\n};\n\n\n// --------------------------\n// Sumar valores de etiquetas\n// --------------------------\nfunction sumaEtiquetas(etiquetas)\n{\n    // Preparamos las variables y el registro para la lectura de los valores de las etiquetas\n    var suma             = 0;\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n\n    // Recorremos las etiquetas recibidas\n    for (var numEtiqueta = 0; numEtiqueta < etiquetas.length; numEtiqueta++)\n    {\n        // Leemos la etiqueta y analizamos si incluye signo menos para restar el valor\n        var etiqueta = etiquetas[numEtiqueta];\n        var signo    = \"\";\n        if (etiqueta.substring(0, 1) == \"-\")\n        {\n            etiqueta = etiqueta.substring(1);\n            signo    = \"N\";\n        };\n\n        // Leemos el registro de la etiqueta\n        registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n        if (registroEtiqueta)\n        {\n            // Leemos el valor de la etiqueta y lo sumamos o restamos en función del signo\n            var valor = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n            if (signo = \"N\")\n                suma -= valor;\n            else\n                suma += valor;\n            };\n        };\n\n    // Retornamos el valor calculado\n    return suma;\n};",
				"VER_ULT_ACT": "26.0",
				"OFF": false,
				"ID_SCR": "FUN-GEN-AEAT-303"
			},
			{
				"ID": "VTA-FAC-ENV-NOT-FUN-GEN",
				"NAME": "Funciones generales envio de notificacion de factura de venta",
				"SCR": "importClass(\"VFile\");\n\n//---------------------------------------------------------------\n//Funcion que convierto un fichero en disco a base64\n//---------------------------------------------------------------\nfunction ficheroToBase64( sendaFichero ){\n\n     var adjunto = \"\";\n     if( theApp.existsFile( sendaFichero ) == true){\n          var contenido = new VByteArray();\n          var fp = new VFile( sendaFichero );\t\t\n          if ( fp.open( VFile.OpenModeReadOnly ) ){\n               contenido = fp.readAll();\n          }\n          fp.close();\n          adjunto = contenido.toBase64().toLatin1String();     \n     }\n     return adjunto;\n}\n\n//---------------------------------------------------------------\n//Funcion que guarda un VByteArray en un fichero en disco\n//---------------------------------------------------------------\nfunction guardarFicheroDisco( contenido, sendaFicheroDestino ){\n     \n     var vba = new VByteArray();\n     vba.setText( contenido );\n     var fp = new VFile( sendaFicheroDestino );\t\t\n     if ( fp.open( VFile.OpenModeWriteOnly | VFile.OpenModeTruncate) ){\n\tfp.write( vba );\n\tfp.close();\n          return true;\n     }else{\n          return false;\n     }     \n}\n\n//---------------------------------------------------------------\n//Funcion que guarda el resultado del envio del mail\n//---------------------------------------------------------------\nfunction guardarResultadoEnvio( idEmail, enviado, log ){\n      \n     var hayTrans = theRoot.existTrans();\n     if (hayTrans == false)\n     {\n          var newTrans = theRoot.beginTrans(\"Guardando resultado \" + idEmail);\n     };\n\n     var registro = new VRegister( theRoot );\n     registro.setTable(\"verp_3_dat/EML_W\");\n     registro.readRegister(\"ID\",[idEmail],VRegister.SearchThis);\n     registro.setField(\"ENV\", enviado);\n     registro.setField(\"LOG\", log);\n     registro.setField(\"ENV_TIM\", new Date());\n     registro.modifyRegister();      \n\n     // Finalizar transacción\n     if (newTrans) {\n          theRoot.commitTrans();\n     };\n}",
				"VER_ULT_ACT": "31.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "GEN-FIC-TXT",
				"NAME": "Generación fichero TXT",
				"SCR": "// -------------------------------------------------------------------------------\n// Generación fichero TXT\n//\n// 08-11-2016 - Revisión 20.0\n// 10-02-2021 - Revisión 28.1\n// -------------------------------------------------------------------------------\n\n// -------------------------------------\n// Exportación de fichero en formato TXT\n// -------------------------------------\nfunction generarFicheroTxt()\n{\n    // Importamos las clases necesarias\n    importClass(\"VFile\");\n    importClass(\"VTextFile\");\n\n    // Preparar el fichero en disco\n    var senda       = theApp.clientCachePath() + parametros.fichero.nombre;\n    var fichero     = new VTextFile(senda);\n    var ficheroOpen = fichero.open(VFile.OpenModeWriteOnly | VFile.OpenModeTruncate);\n\n    // Se cargan los plurales del fichero calculado y se ejecuta proceso recursivo\n    var texto = \"\";\n    var linea = \"\";\n    listaRegistros = registroFic.loadPlurals(\"FIC_REG_W_FIC_VIS_NO_CAM\");\n    for (var numRegistro = 0; numRegistro < listaRegistros.size(); numRegistro++)\n    {\n        // Se lee el registro y se procesan sus campos\n        var registro = listaRegistros.readAt(numRegistro);\n        // Controlar que no se genera información en el fichero si es multiregistro o no exportable \n        linea       += procesarRegistroHijo(fichero, registro, linea, texto);\n\n        // Se graba la línea en el fichero\n        if (linea != \"\")\n        {\n           if (registro.fieldToBool(\"NO_EXP\") == false)\n            {\n                fichero.write(linea + \"\\n\");\n                texto += linea + \"\\n\";\n            }\n            linea  = \"\";\n        };\n    };\n    \n    // Se cierra el fichero generado\n    fichero.close();\n    \n    // Guardamos el texto del fichero generado\n    registroFic.setField(\"FIC\", texto);\n    registroFic.modifyRegister();\n};\n\n\n// ----------------------------------------------------------------------------\n// Proceso recursivo que genera la línea a grabar con los valores de los campos\n// ----------------------------------------------------------------------------\nfunction procesarRegistroHijo(x_fichero, x_registroPadre, x_linea, x_texto)\n{\n    var f_fichero = x_fichero;\n    var f_registroPadre = x_registroPadre;\n    var f_linea = x_linea;\n    var f_texto = x_texto;\n    var tam_lista_hijos = 0;\n\n    // Leemos los datos del registro\n    var tipoItem = f_registroPadre.fieldToString(\"PLF_TIP_ITE\");\n    var valor    = f_registroPadre.fieldToString(\"ARB_VAL_CAL\");\n\n    // Si es un registro\n    if (tipoItem = \"R\")\n    {\n        // Se cargan los hijos y se ejecuta este proceso recursivamente\n        f_linea      = \"\";\n        listaHijos = f_registroPadre.loadPlurals(\"FIC_REG_W_FIC_REG_PAD_ORD_VIS_TXT\");\n        tam_lista_hijos = listaHijos.size();\n        for (var numRegistroHijo = 0; numRegistroHijo < tam_lista_hijos; numRegistroHijo++)\n        {\n            var registroHijo = listaHijos.readAt(numRegistroHijo);\n            var tipoItem     = registroHijo.fieldToString(\"PLF_TIP_ITE\");\n            var valor        = formateaCampo(registroHijo);\n            if (tipoItem == \"C\")\n               { f_linea += valor;}\n            else\n               { //Guardamos el puntero del número de registro y la lista de hijos para recuperarla\n                //Despues de la función recursiva\n               \n               var numRegistroHijoTmp = numRegistroHijo;\n               var listaHijosTmp = listaHijos;  \n\n               f_linea += procesarRegistroHijo(f_fichero, registroHijo, f_linea, f_texto);\n\n               var listaHijos = listaHijosTmp;  \n               var numRegistroHijo = numRegistroHijoTmp;\n              }\n\n        };\n    };\n    \n    // Devolvemos la línea\n    return f_linea;\n};\n\n// -----------------------------------------------------------------------------------------------\n// Formatea el dato a incluir en el fichero TXT en función del tipo de campo y sus características\n// -----------------------------------------------------------------------------------------------\nfunction formateaCampo(registroHijo)\n{\n    var dato                  = \"\";\n    var tipoCampo             = registroHijo.fieldToString(\"PLF.PLF_TIP_CAM\");\n    var longitudEntero        = registroHijo.fieldToInt(\"PLF.DIG_NUM_ENT\");\n    var longitudDecimal       = registroHijo.fieldToInt(\"PLF.DIG_NUM_DEC\");\n    var longitudTexto         = registroHijo.fieldToInt(\"PLF.LON_CAM\");\n    var longitudTextoVariable = registroHijo.fieldToBool(\"PLF.LON_CAM_VAR\");\n    switch(tipoCampo)\n    {\n        case \"N\": // Numérico sin signo\n            dato = registroHijo.fieldToDouble(\"VAL_CAL\");\n            dato = componeNumero(dato, tipoCampo, longitudEntero, longitudDecimal);\n            break;\n\n        case \"S\": // Numérico con signo\n            dato = registroHijo.fieldToDouble(\"VAL_CAL\");\n            dato = componeNumero(dato, tipoCampo, longitudEntero, longitudDecimal);\n            break;\n\n        case \"A\": // Alfabético\n        case \"F\": // Alfanumérico\n            dato = registroHijo.fieldToString(\"TXT_CAL\");\n            if (dato == \"\") dato = \" \";\n            if (longitudTextoVariable == false)\n                var blancos = new Array(longitudTexto + 1).join(\" \");\n                dato = (dato + blancos).slice(0, longitudTexto);\n            break;\n\n        case \"D\": // Fecha\n            dato = new Date(registroHijo.fieldToDate(\"FCH_CAL\"));\n            dato = convertirFecha(dato, \"aaaammdd\");\n            break;\n\n        default:\n            dato = registroHijo.fieldToString(\"ARB_VAL_CAL\");\n    };\n\n    // Retornamos el valor del campo formateado\n    return dato;\n};",
				"VER_ULT_ACT": "28.0",
				"OFF": false,
				"ID_SCR": "GEN-FIC-TXT"
			},
			{
				"ID": "GEN-FIC-TXT-AEAT-303",
				"NAME": "Generación fichero TXT (AEAT 303)",
				"SCR": "// -------------------------------------------------------------------------------\n// Generación ficheros TXT. Modelo 303\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n// -------------------------------------\n// Exportación de fichero en formato TXT\n// Específico para el 303 - AEAT\n// -------------------------------------\nfunction generarFicheroTxt()\n{\n    // Importamos las clases necesarias\n    importClass(\"VFile\");\n    importClass(\"VTextFile\");\n\n    // Preparar el fichero en disco\n    var senda       = theApp.clientCachePath() + parametros.fichero.nombre;\n    var fichero     = new VTextFile(senda);\n    var ficheroOpen = fichero.open(VFile.OpenModeWriteOnly | VFile.OpenModeTruncate);\n\n    // Se cargan los pluarales del fichero calculado y se ejecuta proceso recursivo\n    var texto = \"\";\n    var linea = \"\";\n    listaRegistros = registroFic.loadPlurals(\"FIC_REG_W_FIC_VIS_NO_CAM\")\n    //Con este pluaral nos habrá cargado el registro de la HOJA 00 y además los registros de las HOJAS 01,02,03\n    //Como los registros de las HOJAS 01,02,03 están embebidos dentro del registro de la HOJA 00 debemos tener en cuenta que ahora no tendremos que procesarlos\n    //Sabemos que los registros de las HOJAS 01,02,03 están embebidos dentro de la HOJA 00 pq tienen el mismo Registro Padre, cuyo Padre es la HOJA 00\n    for (var numRegistro = 0; numRegistro < listaRegistros.size(); numRegistro++)\n    {\n        // Se lee el registro y se procesan sus campos\n        var registro         = listaRegistros.readAt(numRegistro);\n        var numRegistroPadre = registro.fieldToInt(\"FIC_REG_PAD\");\n\n        if (numRegistroPadre == 0) {\n            //Si no tiene Registro Padre estaremos ante el registro de la HOJA 00\n\n            //Procesamos HOJA 00 - Como registro hijo principal\n            linea       += procesarRegistroHijo(fichero, registro, linea, texto);\n\n            // Se graba la línea en el fichero\n            if (linea != \"\")\n            {\n                if (registro.fieldToBool(\"NO_EXP\") == false)\n                {\n                    if (texto != \"\")\n                    {\n                    fichero.write(\"\\n\" + linea);\n                    } else\n                    {\n                     fichero.write(linea);\n                    }\n                }\n                texto += linea;\n                linea  = \"\";\n            };\n\n        };   \n    };\n    \n    // Se cierra el fichero generado\n    fichero.close();\n    \n    // Guardamos el texto del fichero generado\n    registroFic.setField(\"FIC\", texto);\n    registroFic.modifyRegister();\n};\n\n\n// ----------------------------------------------------------------------------\n// Proceso recursivo que genera la línea a grabar con los valores de los campos\n// ----------------------------------------------------------------------------\nfunction procesarRegistroHijo(fichero, registroPadre, linea, texto)\n{\n    // Leemos los datos del registro\n    var tipoItem = registroPadre.fieldToString(\"PLF_TIP_ITE\");\n    var valor    = registroPadre.fieldToString(\"ARB_VAL_CAL\");\n\n    // Si es un registro - Lo tiene que ser puesto que procesamos la HOJA 00 (Hijo principal)\n    if (tipoItem = \"R\")\n    {\n        // Se cargan los plurales (campos y HOJAS 01,02,03)\n        linea      = \"\";\n        listaHijos = registroPadre.loadPlurals(\"FIC_REG_W_FIC_REG_PAD_ORD_VIS_TXT\")\n        for (var numRegistroHijo = 0; numRegistroHijo < listaHijos.size(); numRegistroHijo++)\n        {\n            var registroHijo = listaHijos.readAt(numRegistroHijo);\n            var tipoItem     = registroHijo.fieldToString(\"PLF_TIP_ITE\");\n\n            if (tipoItem == \"C\") {\n                var valor    = formateaCampo(registroHijo);\n                linea += valor;\n            } else if (tipoItem == \"R\") {\n                //Si se trata de HOJAS, 01,02,03 llamamos a otra función idéntica\n                //Si se llama a ella recursivamente no acaba de procesar correctamente todas las HOJAS\n                //Lo único que cambia es que le hemos puesto el prefijo \"R\" tanto a la función como a todas las variables y parámetros\n                linea += procesarRegistroHijoR(fichero, registroHijo, linea, texto);\n            };\n        };\n    };\n    \n    // Devolvemos la línea\n    return linea;\n};\n\nfunction procesarRegistroHijoR(ficheroR, registroPadreR, lineaR, textoR)\n{\n    // Leemos los datos del registro\n    var tipoItemR = registroPadreR.fieldToString(\"PLF_TIP_ITE\");\n    var valorR    = registroPadreR.fieldToString(\"ARB_VAL_CAL\");\n\n    // Si es un registro - Lo tiene que ser puesto que procesamos las HOJAS 01,02,03 (Dependen del Hijo principal)\n    if (tipoItemR = \"R\")\n    {\n        lineaR      = \"\";\n        listaHijosR = registroPadreR.loadPlurals(\"FIC_REG_W_FIC_REG_PAD_ORD_VIS_TXT\")\n        for (var numRegistroHijoR = 0; numRegistroHijoR < listaHijosR.size(); numRegistroHijoR++)\n        {\n            var registroHijoR = listaHijosR.readAt(numRegistroHijoR);\n            var tipoItemR     = registroHijoR.fieldToString(\"PLF_TIP_ITE\");\n\n            if (tipoItemR == \"C\") {\n                var valorR    = formateaCampo(registroHijoR);\n                lineaR += valorR;\n            };\n        };\n    };\n    \n    // Devolvemos la línea\n    return lineaR;\n};\n\n// -----------------------------------------------------------------------------------------------\n// Formatea el dato a incluir en el fichero TXT en función del tipo de campo y sus características\n// -----------------------------------------------------------------------------------------------\nfunction formateaCampo(registroHijo)\n{\n    var dato                  = \"\";\n    var tipoCampo             = registroHijo.fieldToString(\"PLF.PLF_TIP_CAM\");\n    var longitudEntero        = registroHijo.fieldToInt(\"PLF.DIG_NUM_ENT\");\n    var longitudDecimal       = registroHijo.fieldToInt(\"PLF.DIG_NUM_DEC\");\n    var longitudTexto         = registroHijo.fieldToInt(\"PLF.LON_CAM\");\n    var longitudTextoVariable = registroHijo.fieldToBool(\"PLF.LON_CAM_VAR\");\n\n    switch(tipoCampo)\n    {\n        case \"N\": // Numérico sin signo\n            dato = registroHijo.fieldToDouble(\"VAL_CAL\");\n            dato = componeNumero(dato, tipoCampo, longitudEntero, longitudDecimal);\n            break;\n\n        case \"S\": // Numérico con signo\n            dato = registroHijo.fieldToDouble(\"VAL_CAL\");\n            dato = componeNumero(dato, tipoCampo, longitudEntero, longitudDecimal);\n            break;\n\n        case \"A\": // Alfabético\n        case \"F\": // Alfanumérico\n            dato = registroHijo.fieldToString(\"TXT_CAL\");\n            if (dato == \"\") dato = \" \";\n            if (longitudTextoVariable == false)\n                var blancos = new Array(longitudTexto + 1).join(\" \");\n                dato = (dato + blancos).slice(0, longitudTexto);\n            break;\n\n        case \"D\": // Fecha\n            dato = new Date(registroHijo.fieldToDate(\"FCH_CAL\"));\n            dato = convertirFecha(dato, \"aaaammdd\");\n            break;\n\n        default:\n            dato = registroHijo.fieldToString(\"ARB_VAL_CAL\");\n    };\n\n    // Retornamos el valor del campo formateado\n    return dato;\n};",
				"VER_ULT_ACT": "25.0",
				"OFF": false,
				"ID_SCR": "GEN-FIC-TXT-AEAT-303"
			},
			{
				"ID": "VTA-FAC-ENV-NOT-GEN-BOD",
				"NAME": "Generar Body de notificacion de factura de venta",
				"SCR": "//---------------------------------------------------------------\n//Funcion que genera el body a enviar de la notificacion\n//---------------------------------------------------------------\nfunction prepararObjetoJson( registro, sendaFicheroPDF ){\n     \n     //Preparamos el adjunto, leemos el PDF en disco\n     //y lo convertimos en base64\n     var adjunto = ficheroToBase64( sendaFicheroPDF );\n\n     //Iniciamos el JSON\n     var oJson = {};\n\n     //Seccion para el envio por correo electronico\n     oJson.enviarMail = theRegisterIn.fieldToBool(\"CLT.NOT_EML\");\n     oJson.remitenteMail = theRegisterIn.fieldToString(\"EMP_DIV.ENT.EML\");\n     oJson.asuntoMail = registro.fieldToString(\"ASU\");\n     oJson.cuerpoMail = registro.fieldToString(\"CUE_HTML\");\n     oJson.destinatarioMail = registro.fieldToString(\"TO\");\n     oJson.conCopiaMail = [registro.fieldToString(\"CC\")];\n     oJson.conCopiaOcultaMail = [registro.fieldToString(\"CCO\")];\n     oJson.nombreFicheroAdjunto = theRoot.calcFormulaVelneo(\"getPathFileName(\\\"\"+sendaFichero+\"\\\")\");\n     oJson.contenidoFicheroAdjunto = adjunto;\n\n     //Seccion para el envio por SMS\n     oJson.enviarSMS = theRegisterIn.fieldToBool(\"CLT.NOT_TLF\");\n     oJson.destinatarioSMS = theRegisterIn.fieldToString(\"CLT.TLF\");\n     oJson.cuerpoSMS = theRegisterIn.fieldToString(\"EMP_DIV.ENT.NAME\") + \" informa la emision de su factura \" + theRegisterIn.fieldToString(\"NUM_FAC\") + \" por un total de \" + theRegisterIn.fieldToDouble(\"TOT_FAC\")\n\n     return oJson;\n}",
				"VER_ULT_ACT": "31.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "SUM-ETQ",
				"NAME": "Suma valores de etiquetas",
				"SCR": "// -------------------------------------------------------------------------------\n// Suma valores de etiquetas\n//\n// 08-11-2016 - Revisión 20.0\n// -------------------------------------------------------------------------------\n\n(function sumaEtiquetas()\n{\n    // Preparamos las variables y el registro para la lectura de los valores de las etiquetas\n    var suma             = 0;\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n\n    // Recorremos las etiquetas recibidas\n    for (var numEtiqueta = 0; numEtiqueta < parametros.length; numEtiqueta++)\n    {\n        // Leemos la etiqueta y analizamos si incluye signo menos para restar el valor\n        var etiqueta = parametros[numEtiqueta];\n\n        var signo    = \"\";\n        if (etiqueta.substring(0, 1) == \"-\")\n        {\n            etiqueta = etiqueta.substring(1);\n            signo    = \"N\";\n        };\n\n        // Leemos el registro de la etiqueta\n        registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, etiqueta], VRegister.SearchThis);\n        if (registroEtiqueta)\n        {\n            // Leemos el valor de la etiqueta y lo sumamos o restamos en función del signo\n            var valor = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n            if (signo == \"N\")\n                suma -= valor;\n            else\n                suma += valor;\n            };\n        };\n\n    // Modificamos el valor del registro de fichero en curso y guardamos el registro\n    registroFicReg.setField(\"VAL_CAL\", suma);\n    registroFicReg.modifyRegister();\n})();",
				"VER_ULT_ACT": "20.0.3",
				"OFF": false,
				"ID_SCR": "SUM-ETQ"
			},
			{
				"ID": "VTA-FAC-TKT-BAI-FUN-GEN",
				"NAME": "TicketBai: Funciones generales",
				"SCR": "importClass(\"VFile\");\nimportClass(\"VImage\");\n\n// -------------------------------------------------------------------------------\n// Funcion para guardar fichero en disco\n// -------------------------------------------------------------------------------\nfunction guardarFicheroDisco( sendaFichero, cuerpoFichero, vieneBase64 ){\n\n     var contenido = new VByteArray();\n     contenido.setText( cuerpoFichero );\n     \n     var fp = new VFile( sendaFichero );\t\t\n     if ( fp.open( VFile.OpenModeWriteOnly | VFile.OpenModeTruncate) ){\n\t\tif( vieneBase64 == false ){\n\t\t\tfp.write( contenido );\n\t\t}else{\n\t\t\tvar vb64 = new VByteArray();\n\t\t\tvb64.fromBase64( contenido );\n\t\t\tfp.write( vb64.toLatin1String() );\n\t\t}\n\t\tfp.close();\n        return true;\n     }else{\n            return false;\n     }\n}\n\n// -------------------------------------------------------------------------------\n// Funcion para leer fichero en disco\n// -------------------------------------------------------------------------------\nfunction leerFicheroDisco( sendaFichero, formato ){\n\n   if( theApp.existsFile( sendaFichero ) == true){\n\t\tvar contenido = new VByteArray();\n\t\tvar fp = new VFile( sendaFichero );\t\t\n\t\tif ( fp.open( VFile.OpenModeReadOnly ) ){\n\t\t\tcontenido = fp.readAll();\n\t\t}\n\t\tfp.close();\n\t\tif( formato == \"Base64\" ){\n\t\t\treturn contenido.toBase64().toLatin1String()\n\t\t}else{\n\t\t\treturn contenido.toLatin1String();\n\t\t}\t\n\t}else{\n\t\talert(\"El fichero no existe en la ruta \" + sendaFichero );\n\t\treturn \"\";\n\t}  \n}\n\n// -------------------------------------------------------------------------------\n// Obtener Imagen del Base64\n// -------------------------------------------------------------------------------\nfunction obtenerImagen( datosBase64 ){\n\t\n\tvar vb64 = new VByteArray();\n\tvar contenido = new VByteArray();\n\tvar img = new VImage();\t\n\tvb64.setText( datosBase64 );\n\tcontenido.fromBase64(vb64);\t\n\timg.loadFromData( contenido, \"JPG\");\t\n\treturn img;\n\t\n}\n\n// -------------------------------------------------------------------------------\n// Guardar datos en la factura\n// -------------------------------------------------------------------------------\nfunction guardarDatosFactura( objetoRetorno ){\n\n\tvar nuevaTrans = false;\n\tvar hayTrans = theRoot.existTrans();\n\tif ( hayTrans == false ) \n\t{\n\t  var nuevaTrans = theRoot.beginTrans( \"Actualizando datos de la firma de la factura\" )\n\t};\n\t\n\tvar registro = new VRegister( theRoot );\n\t\n\tregistro.setTable( \"verp_3_dat/VTA_FAC_G\" );\n\tregistro.readRegister(\"ID\",[theRegisterIn.fieldToInt(\"ID\")], VRegister.SearchThis);\t\n\tregistro.setField(\"DOC_PRE_ELE\", true );\n\tregistro.setField(\"COD_REC_ELE\", objetoRetorno.CodigoUnico );\n\tregistro.setField(\"URL_DOC_ELE\", objetoRetorno.CodigoQRCadena );\n\tregistro.setField(\"FIR_DOC_ELE\", objetoRetorno.SignatureValue );\n\tregistro.setFieldImage(\"IMG_DOC_ELE\", obtenerImagen(objetoRetorno.CodigoQRBase64) );\t\n\tregistro.setField(\"OBS\", registro.fieldToString(\"OBS\") + \"\\n\\n\\n\\nIdRegistroTicketBai=\" + objetoRetorno.IdRegistro );\n\tregistro.modifyRegister();\t\n\t// Si se creó una nueva transacción se finaliza\n\tif ( nuevaTrans )\n\t{\n\t  theRoot.commitTrans();\n\t};\n}\n\n// -------------------------------------------------------------------------------\n// Generamos el JSON para el proceso de FIRMA\n// -------------------------------------------------------------------------------\nfunction generarJsonParaFirmar( accion, pruebaProduccion, localidad, sendaXML, sendaCertificado, claveCertificado, idRegistro ){\n\t\n\tvar objetoJSON = {};\n\tobjetoJSON.ACC = accion;\n\tobjetoJSON.AMB_PRU_PRO = pruebaProduccion;\n\tobjetoJSON.LOC = localidad;\n\tobjetoJSON.XML = leerFicheroDisco(sendaXML, \"Base64\");\n\tobjetoJSON.SND_CRT = leerFicheroDisco(sendaCertificado, \"Base64\");\n\tobjetoJSON.CLV_CRT = claveCertificado;\t\n\tobjetoJSON.ID_REG = idRegistro;\n\tobjetoJSON.CIF_CLT = theRegisterIn.fieldToString(\"CLT.CIF\");\t\n\tvar datosPartner = devolverDatosPartner();\n\tobjetoJSON.CIF_AUT = datosPartner.cifAutorizado;\n\tobjetoJSON.COD_SEG = datosPartner.codigoSeguridad;\n\treturn objetoJSON;\n}\n\n// -------------------------------------------------------------------------------\n// Generamos el JSON para el proceso de ENVIO\n// -------------------------------------------------------------------------------\nfunction generarJsonParaEnviar( accion, pruebaProduccion, localidad, xmlBase64, sendaCertificado, claveCertificado, idRegistro){\n\t\n\tvar objetoJSON = {};\n\tobjetoJSON.ACC = accion;\n\tobjetoJSON.AMB_PRU_PRO = pruebaProduccion;\n\tobjetoJSON.LOC = localidad;\n\tobjetoJSON.XML = xmlBase64;\n\tobjetoJSON.SND_CRT = leerFicheroDisco(sendaCertificado, \"Base64\");\n\tobjetoJSON.CLV_CRT = claveCertificado;\n\tobjetoJSON.ID_REG = idRegistro;\n\tobjetoJSON.CIF_CLT = theRegisterIn.fieldToString(\"CLT.CIF\");\t\n\tvar datosPartner = devolverDatosPartner();\n\tobjetoJSON.CIF_AUT = datosPartner.cifAutorizado;\n\tobjetoJSON.COD_SEG = datosPartner.codigoSeguridad;\n\tobjetoJSON.CRT = datosPartner.certificadoPEM;\n\tobjetoJSON.CLV_PRI = datosPartner.clavePrivadaPEM;\n\treturn objetoJSON;\n}",
				"VER_ULT_ACT": "32.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "VTA-FAC-TKT-BAI-FUN-PAR",
				"NAME": "TicketBai: Funciones de identificacion de partners",
				"SCR": "// -------------------------------------------------------------------------------\n// Funcion que devuelve un objeto de los datos del partner\n// -------------------------------------------------------------------------------\nfunction devolverDatosPartner(){\n\tvar objetoPartner = {};\t\n\tobjetoPartner.cifAutorizado = \"CIF_PARNERT\";\n\tobjetoPartner.codigoSeguridad = \"CODIGO_SEGURIDAD_PARNERT\";\n\tobjetoPartner.vrlConexion = \"vatp://192.168.88.41\";\n\tobjetoPartner.usuarioConexion = \"demo\";\n\tobjetoPartner.claveConexion = \"1234\";\n\tobjetoPartner.instanciaConexion = \"VTICKETBAI_DAT\";\n\tobjetoPartner.vrlConexionAlterna = \"vatp://192.168.88.41\";\n\tobjetoPartner.usuarioConexionAlterna = \"demo\";\n\tobjetoPartner.claveConexionAlterna = \"1234\";\n\tobjetoPartner.instanciaConexionAlterna = \"VTICKETBAI_DAT\";\n\tobjetoPartner.certificadoPEM = \"-----BEGIN CERTIFICATE-----\\r\\nMIIJtzCCB5+gAwIBAgICG3YwDQYJKoZIhvcNAQELBQAwgZcxCzAJBgNVBAYTAkVT\\r\\nMRQwEgYDVQQKDAtJWkVOUEUgUy5BLjE6MDgGA1UECwwxTlpaIFppdXJ0YWdpcmkg\\r\\ncHVibGlrb2EgLSBDZXJ0aWZpY2FkbyBwdWJsaWNvIFNDSTE2MDQGA1UEAwwtQ0Eg\\r\\nZGUgQ2l1ZGFkYW5vcyB5IEVudGlkYWRlcyAoNCkgLSBERVNBUlJPTExPMB4XDTIx\\r\\nMDMxNTEwMDQzN1oXDTI1MDMxNTEwMDQzN1owggFtMQswCQYDVQQGEwJFUzFvMG0G\\r\\nA1UEDQxmUmVnOkdhc3RlaXogL0hvamE6Qi0xNjY0NzIgL1RvbW86MzczOTMgL1Nl\\r\\nY2Npb246OCAvTGlicm86MSAvRm9saW86MjAgL0ZlY2hhOjEwLTAyLTE5NzQgL0lu\\r\\nc2NyaXBjacOzbjoxMRgwFgYDVQRhDA9WQVRFUy1TNzgzNjEwN0gxPTA7BgNVBAsM\\r\\nNE9yZGV6a2FyaSB6aXVydGFnaXJpYSAtIENlcnRpZmljYWRvIGRlIHJlcHJlc2Vu\\r\\ndGFudGUxFDASBgNVBAoMC0laRU5QRSBTLkEuMRIwEAYDVQQFEwk5OTk5OTk3M0sx\\r\\nGDAWBgNVBAQMD0ZJQ1RJQ0lPIEFDVElWTzEWMBQGA1UEKgwNUkVQUkVTRU5UQU5U\\r\\nRTE4MDYGA1UEAwwvOTk5OTk5NzNLIFJFUFJFU0VOVEFOVEUgRklDVElDSU8gKFI6\\r\\nIFM3ODM2MTA3SCkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsI8cb\\r\\niOSsEMrK+lr6Vn7xeDlI1UJIVWM4kMTyXoFcU9F7LkdbSv5jS1D1g3/c8YId1nFj\\r\\nPrHXjpBbjv4Am9QEvHKPa9djI9lTKS3gut5DDU1ePRAagnSCAr2Y6m4isbMF54S5\\r\\ntp0/Ng+myx5c2E+hMmgNw6uZ9KvdwaYY1gQW/N/7qS0KlA1eB0CSHyzZeVRgbYAX\\r\\nI6AMCtuYCRVNLbnzJBvSN0J4SuZeiM/KK0I0oj/8THajszp8hg3v2cfOMAGu5cM3\\r\\nyuBAPTBPBZCkGofwZqMn2ioMZXwRYuXJv4UEncs+d9qZbVGFpc9y0vwbQuPhZU2o\\r\\nmSGTWedL4DlnbXDHAgMBAAGjggQyMIIELjCBxwYDVR0SBIG/MIG8hhVodHRwOi8v\\r\\nd3d3Lml6ZW5wZS5jb22BD2luZm9AaXplbnBlLmNvbaSBkTCBjjFHMEUGA1UECgw+\\r\\nSVpFTlBFIFMuQS4gLSBDSUYgQTAxMzM3MjYwLVJNZXJjLlZpdG9yaWEtR2FzdGVp\\r\\neiBUMTA1NSBGNjIgUzgxQzBBBgNVBAkMOkF2ZGEgZGVsIE1lZGl0ZXJyYW5lbyBF\\r\\ndG9yYmlkZWEgMTQgLSAwMTAxMCBWaXRvcmlhLUdhc3RlaXowDgYDVR0PAQH/BAQD\\r\\nAgXgMB8GA1UdJQQYMBYGCCsGAQUFBwMCBgorBgEEAYI3CgMMMB0GA1UdDgQWBBQR\\r\\nR3q3tcdVPr8U7NS+zkf7EBt32jAfBgNVHSMEGDAWgBRv//0N8gxjDyZxXRrgb2Vk\\r\\nZjhrkzCCATQGA1UdIASCASswggEnMIIBDQYJKwYBBAHzOWYMMIH/MCUGCCsGAQUF\\r\\nBwIBFhlodHRwOi8vd3d3Lml6ZW5wZS5jb20vY3BzMIHVBggrBgEFBQcCAjCByAyB\\r\\nxUtvbnRzdWx0YSB3d3cuaXplbnBlLmNvbS1lbiBiYWxkaW50emFrIGV0YSBrb25k\\r\\naXppb2FrIHppdXJ0YWdpcmlhbiBmaWRhdHUgZWRvIGVyYWJpbGkgYXVycmV0aWsg\\r\\nLSBDb25zdWx0ZSBlbiB3d3cuaXplbnBlLmNvbSBsb3MgdMOpcm1pbm9zIHkgY29u\\r\\nZGljaW9uZXMgYW50ZXMgZGUgdXRpbGl6YXIgbyBjb25maWFyIGVuIGVsIGNlcnRp\\r\\nZmljYWRvMAkGBwQAi+xAAQIwCQYHYIVUAQMFCDCBogYIKwYBBQUHAQEEgZUwgZIw\\r\\nJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwZGVzLml6ZW5wZS5jb20waQYIKwYBBQUH\\r\\nMAKGXWh0dHA6Ly93d3cuaXplbnBlLmNvbS9jb250ZW5pZG9zL2luZm9ybWFjaW9u\\r\\nL2Nhc19pemVucGUvZXNfY2FzL2FkanVudG9zL0NDRUVSX2NlcnRfc2hhMjU2LmNy\\r\\ndDCB2wYIKwYBBQUHAQMEgc4wgcswCAYGBACORgEBMAgGBgQAjkYBBDALBgYEAI5G\\r\\nAQMCAQ8wfAYGBACORgEFMHIwJBYeaHR0cHM6Ly93d3cuaXplbnBlLmNvbS9wZHMv\\r\\nZW4vEwJlbjAkFh5odHRwczovL3d3dy5pemVucGUuY29tL3Bkcy9ldS8TAmV1MCQW\\r\\nHmh0dHBzOi8vd3d3Lml6ZW5wZS5jb20vcGRzL2VzLxMCZXMwEwYGBACORgEGMAkG\\r\\nBwQAjkYBBgEwFQYIKwYBBQUHCwIwCQYHBACL7EkBAjA2BgNVHR8ELzAtMCugKaAn\\r\\nhiVodHRwOi8vY3JsZGVzLml6ZW5wZS5jb20vY2dpLWJpbi9jcmwyMA0GCSqGSIb3\\r\\nDQEBCwUAA4ICAQCJaRL+xyX6HFu/6AX7N0j/r1ZB3OAY8t4S3KBvxQBs/PGeQmHF\\r\\nr8cnFXxb2cfkZ/5IzDDMElicChXq86BgaXn6xxtw4q30/qsuwz8iwF+mLKENFGIY\\r\\nTdxmaGCuSBwhENWrv03uUeskL4gIMQIu5fhpdZRj2aW4ccsb9QdfLCHRtjxrgZMo\\r\\nL7tpXRYQcpKgMKroAg3PuIhwdg3eLhVZvihtUJ0oNGtEBz+04eRCZjXx8dWVrmYx\\r\\nfTEqHFaYc8Nxu6AuQvPQdBAC2DoxYLUpihUBvKo8aUrU/QhUCue76Sq9hnzi6TXC\\r\\nofNeixMZBB+ODwvcInWTX0N/m7zC/9wRcQ1vE6gO6lbNd6JnwiLHclf+oLAsRLWw\\r\\nN9dEeDEER2IvtlmIapKhxDrPQ9zSAiibaVSAVxvWC5bal2CgfgijlamDQ8lPD+/F\\r\\nv1O6s8hGTEfMiDNErCC7IWn3ckjg+Ipz11DQO2hRI/VmarFDFtreavVsSgwseVJI\\r\\nQxavgOzMJVFRx1TQCBZFvW9RnM32QDygq2vrs234fD3ak8DtdmKd0aPLNYSN3zai\\r\\naPOzfhK6Z5m36Zltqzhzjg0YkoPcbmPGUO5tq7X7SwFeb0Kx7gEPzZHavbcnNYtu\\r\\nPgqFJklNk2+3zztodccRgZGtLRQJay+xwSNh8YiU+NmIgx2ad24qugodzg==\\r\\n-----END CERTIFICATE-----\";\n\tobjetoPartner.clavePrivadaPEM = \"-----BEGIN PRIVATE KEY-----\\r\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCsI8cbiOSsEMrK\\r\\n+lr6Vn7xeDlI1UJIVWM4kMTyXoFcU9F7LkdbSv5jS1D1g3/c8YId1nFjPrHXjpBb\\r\\njv4Am9QEvHKPa9djI9lTKS3gut5DDU1ePRAagnSCAr2Y6m4isbMF54S5tp0/Ng+m\\r\\nyx5c2E+hMmgNw6uZ9KvdwaYY1gQW/N/7qS0KlA1eB0CSHyzZeVRgbYAXI6AMCtuY\\r\\nCRVNLbnzJBvSN0J4SuZeiM/KK0I0oj/8THajszp8hg3v2cfOMAGu5cM3yuBAPTBP\\r\\nBZCkGofwZqMn2ioMZXwRYuXJv4UEncs+d9qZbVGFpc9y0vwbQuPhZU2omSGTWedL\\r\\n4DlnbXDHAgMBAAECggEAR7zhTWhPZCXbXZvYLlu9q4Qe22uEpABxyTEL4rXf00pb\\r\\nEqrGshUezuKkaqzSrJE5WJX1yxZlpx+SqZV95WMLiK3AUGTw7jASccXHiNBXsDnq\\r\\n9EseWu3jAAuEWCXaoDrOELfbaEniXmV5QFmF3cuH4/XNx260JQUCWvhI8DDAo5Mv\\r\\n/UPk8O4fIe8sP4PMxjiSDfdE0tSot/q8b389LZugINqPINQo2L/FFpJ0aEhQG5De\\r\\n/5p4OF2BB0MJxvooc1AO1ClxO6Wx6b29Y6XpB9tZ0SHjUXIqPTJqQEH1UMWb92IP\\r\\nU2qPHGGgYRTt1UJQMFNY9okdnVm84NQ6EmlvifgrgQKBgQDXfl+Yo4/X6dugIoTE\\r\\nQhCm5GTp167WqwS6G3bxgpeyXzTtUmkhCXlgtcyCPuNOzBrONd2iIIENqt+37T1U\\r\\npS03R3b9wz8BORJiWvzBq6VfHfbwc/8Dp30b0jLgchBxc9DoNmQBWowwkFY/GlEw\\r\\nIxx67IrqNwjbEy8a9sASy6fapQKBgQDMfzNdBJtg8dyb8vof6WSNB5GiTQPAHMFA\\r\\nvAyMDPDIeSOr6wDhRj7e+3LdQ+z9a4TyJUaQjJcq0xyAztWYE6KjrAqwtispt/xl\\r\\nj4XqSUA0QLR+LnsPJ5nfGNSi76bbzgHDfIMaavbBQGV4QUKbp27CPxGwUWajO8Uq\\r\\nc6/N8aH9+wKBgH2W/jnkYWnxtnk+hOgopLHPfGy4sgIUS733UbvxY12mlR8XH4QM\\r\\nlHvjmFv0MN/0nk6+H/xkOzJu+tGj51GUrqR/9v5wMyEQVQGTi6mH0up7eTasM9y6\\r\\nWXTEbbhXYfPtDry3LlOHpRqMlGdUfCq0291cTJ2yE2wyYwqw8kJCBQKtAoGBAKje\\r\\ndaTflAvXTkz9te06R41qbanwHSO82x1A7L+ORBvYZUunkZ916Z8rV6w+VmrjKfLo\\r\\nM0BUyNRVZxk7NAkUVd8AyAcrN7OIuoWHopdZDAraT/JPIdHe6uLfV2CBtHGYyb4L\\r\\niRv8rm3hZqmKgp2VAxKnEE1guvga+HNY+xl+6z2XAoGBALonczZLhKDMrNNQ4y2+\\r\\nGkzGAf6CWYc66zh1RlcEmvQXQFLsUbTnLrnJwaqeM7i0GPLNJuHW8anaOrjD4M80\\r\\nTgpG6svrJVCJxa/9Dtg2ddEvwu7IF2Iih6MqupnnGPKIr3aADBk58O97UF1dQMU8\\r\\nAMazcOW7oPVvS5ymBFd/Eofo\\r\\n-----END PRIVATE KEY-----\";\n\treturn objetoPartner;\n}",
				"VER_ULT_ACT": "32.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "VTA-FAC-TKT-BAI-GEN-XML",
				"NAME": "Ticketbai: Generar XML",
				"SCR": "// -------------------------------------------------------------------------------\n// Funciones para generar XML TicketBai\n//\n// 08-11-2022 - Revisión 32.0\n// -------------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------------\n// Generar XML partiendo de VTA_FAC_G\n// -------------------------------------------------------------------------------\nfunction generarXMLBizkaia(){\n\n\tvar cuerpoXML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\";\n\t//Establecemos la cabecera del XML\n\tcuerpoXML += \"<T:TicketBai xmlns:T=\\\"urn:ticketbai:emision\\\" xmlns:ds=\\\"http://www.w3.org/2000/09/xmldsig#\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"urn:ticketbai:emision ticketBaiV1-2.xsd \\\">\";\n\tcuerpoXML += \"<Cabecera><IDVersionTBAI>1.2</IDVersionTBAI></Cabecera>\";\n\t//Agregamos los sujetos\n\tcuerpoXML += \"<Sujetos><Emisor><NIF>\" + theRegisterIn.fieldToString(\"EMP_DIV.ENT.CIF\") + \"</NIF><ApellidosNombreRazonSocial>\"+theRegisterIn.fieldToString(\"EMP_DIV.ENT.NOM_FIS\")+\"</ApellidosNombreRazonSocial></Emisor>\";\n\tcuerpoXML += \"<Destinatarios><IDDestinatario><NIF>\" + theRegisterIn.fieldToString(\"CLT.CIF\") + \"</NIF><ApellidosNombreRazonSocial>\" + theRegisterIn.fieldToString(\"CLT.NOM_FIS\") + \"</ApellidosNombreRazonSocial><CodigoPostal>\" + theRegisterIn.fieldToString(\"CLT.CPS\") + \"</CodigoPostal><Direccion>\" + theRegisterIn.fieldToString(\"CLT.DIR\") + \"</Direccion></IDDestinatario></Destinatarios>\";\n\tcuerpoXML += \"<VariosDestinatarios>N</VariosDestinatarios><EmitidaPorTercerosODestinatario>N</EmitidaPorTercerosODestinatario></Sujetos>\";\n\t//Agregamos cabecera de factura\n\tcuerpoXML += \"<Factura><CabeceraFactura><SerieFactura>\" + theRegisterIn.fieldToString(\"SER.CLV\") + \"</SerieFactura><NumFactura>\" + theRegisterIn.fieldToString(\"NUM_FAC\") + \"</NumFactura><FechaExpedicionFactura>\" + theRoot.calcFormulaVelneo(\"dateToString(#FCH,\\\"dd-MM-yyyy\\\")\") + \"</FechaExpedicionFactura><HoraExpedicionFactura>\" + theRoot.calcFormulaVelneo(\"timeToString(#HOR,\\\"hh:mm:ss\\\")\") + \"</HoraExpedicionFactura><FacturaSimplificada>N</FacturaSimplificada><FacturaEmitidaSustitucionSimplificada>N</FacturaEmitidaSustitucionSimplificada>\";\n\tcuerpoXML += \"</CabeceraFactura><DatosFactura><DescripcionFactura>Factura emitida con vERP codigo \" + theRegisterIn.fieldToInt(\"ID\") + \"</DescripcionFactura><DetallesFactura>\";\n   //Agregamos los detalles de la factura\n   var listaDetalles = theRegisterIn.loadPlurals(\"MOV_G_VTA_FAC\");\n   for(var i = 0; i < listaDetalles.size(); i ++){\n\t   var registroDetalle = listaDetalles.readAt(i);\t   \n\t   cuerpoXML += \"<IDDetalleFactura><DescripcionDetalle>\" + registroDetalle.fieldToString(\"DSC_EDT\") + \"</DescripcionDetalle><Cantidad>\" + registroDetalle.fieldToDouble(\"CAN\") + \"</Cantidad><ImporteUnitario>\" + registroDetalle.fieldToDouble(\"PRE\") + \"</ImporteUnitario><Descuento>\" + ((registroDetalle.fieldToDouble(\"PRE\")-registroDetalle.fieldToDouble(\"PRE_NET\"))*registroDetalle.fieldToDouble(\"CAN\")) + \"</Descuento><ImporteTotal>\"+(registroDetalle.fieldToDouble(\"IMP\") * (1 + (registroDetalle.fieldToDouble(\"POR_IVA\")/100)) )+\"</ImporteTotal></IDDetalleFactura>\";\n\t}\n   //Finalizamos detalles y agregamos totales\n   cuerpoXML += \"</DetallesFactura><ImporteTotalFactura>\" + theRegisterIn.fieldToDouble(\"TOT_FAC\") + \"</ImporteTotalFactura><RetencionSoportada>\" + (theRegisterIn.fieldToDouble(\"RET_ALQ\")+theRegisterIn.fieldToDouble(\"RET_IRP\")) + \"</RetencionSoportada><BaseImponibleACoste>0.00</BaseImponibleACoste><Claves><IDClave><ClaveRegimenIvaOpTrascendencia>01</ClaveRegimenIvaOpTrascendencia></IDClave></Claves></DatosFactura>\";\n   //Agregamos el desglose\n   cuerpoXML += \"<TipoDesglose><DesgloseFactura><Sujeta>\";\n   if( theRegisterIn.fieldToDouble(\"BAS_EXE\") > 0 ){\n\t\tcuerpoXML += \"<Exenta><DetalleExenta><CausaExencion>E6</CausaExencion><BaseImponible>\" + theRegisterIn.fieldToDouble(\"BAS_EXE\") + \"</BaseImponible></DetalleExenta></Exenta>\";\n   }\n   if( (theRegisterIn.fieldToDouble(\"BAS_GEN\") + theRegisterIn.fieldToDouble(\"BAS_RED\") + theRegisterIn.fieldToDouble(\"BAS_SUP\")) > 0 ){\n\t\tif( theRegisterIn.fieldToDouble(\"BAS_GEN\") > 0){\n\t\t\tcuerpoXML += \"<NoExenta><DetalleNoExenta><TipoNoExenta>S1</TipoNoExenta>\";\n\t\t\tcuerpoXML += \"<DesgloseIVA><DetalleIVA><BaseImponible>\" + theRegisterIn.fieldToDouble(\"BAS_GEN\") + \"</BaseImponible><TipoImpositivo>\" + theRegisterIn.fieldToDouble(\"POR_IVA_GEN\") + \"</TipoImpositivo><CuotaImpuesto>\" + theRegisterIn.fieldToDouble(\"IVA_GEN\") + \"</CuotaImpuesto><TipoRecargoEquivalencia>\" + theRegisterIn.fieldToDouble(\"POR_REQ_GEN\") + \"</TipoRecargoEquivalencia><CuotaRecargoEquivalencia>\" + theRegisterIn.fieldToDouble(\"REQ_GEN\") + \"</CuotaRecargoEquivalencia><OperacionEnRecargoDeEquivalenciaORegimenSimplificado>N</OperacionEnRecargoDeEquivalenciaORegimenSimplificado></DetalleIVA></DesgloseIVA>\";\n\t\t\tcuerpoXML += \"</DetalleNoExenta></NoExenta>\";\n\t\t}\n\t\tif( theRegisterIn.fieldToDouble(\"BAS_RED\") > 0){\n\t\t\tcuerpoXML += \"<NoExenta><DetalleNoExenta><TipoNoExenta>S1</TipoNoExenta>\";\n\t\t\tcuerpoXML += \"<DesgloseIVA><DetalleIVA><BaseImponible>\" + theRegisterIn.fieldToDouble(\"BAS_RED\") + \"</BaseImponible><TipoImpositivo>\" + theRegisterIn.fieldToDouble(\"POR_IVA_RED\") + \"</TipoImpositivo><CuotaImpuesto>\" + theRegisterIn.fieldToDouble(\"IVA_RED\") + \"</CuotaImpuesto><TipoRecargoEquivalencia>\" + theRegisterIn.fieldToDouble(\"POR_REQ_RED\") + \"</TipoRecargoEquivalencia><CuotaRecargoEquivalencia>\" + theRegisterIn.fieldToDouble(\"REQ_RED\") + \"</CuotaRecargoEquivalencia><OperacionEnRecargoDeEquivalenciaORegimenSimplificado>N</OperacionEnRecargoDeEquivalenciaORegimenSimplificado></DetalleIVA></DesgloseIVA>\";\n\t\t\tcuerpoXML += \"</DetalleNoExenta></NoExenta>\";\n\t\t}\n\t\tif( theRegisterIn.fieldToDouble(\"BAS_SUP\") > 0){\n\t\t\tcuerpoXML += \"<NoExenta><DetalleNoExenta><TipoNoExenta>S1</TipoNoExenta>\";\n\t\t\tcuerpoXML += \"<DesgloseIVA><DetalleIVA><BaseImponible>\" + theRegisterIn.fieldToDouble(\"BAS_SUP\") + \"</BaseImponible><TipoImpositivo>\" + theRegisterIn.fieldToDouble(\"POR_IVA_SUP\") + \"</TipoImpositivo><CuotaImpuesto>\" + theRegisterIn.fieldToDouble(\"IVA_SUP\") + \"</CuotaImpuesto><TipoRecargoEquivalencia>\" + theRegisterIn.fieldToDouble(\"POR_REQ_SUP\") + \"</TipoRecargoEquivalencia><CuotaRecargoEquivalencia>\" + theRegisterIn.fieldToDouble(\"REQ_SUP\") + \"</CuotaRecargoEquivalencia><OperacionEnRecargoDeEquivalenciaORegimenSimplificado>N</OperacionEnRecargoDeEquivalenciaORegimenSimplificado></DetalleIVA></DesgloseIVA>\";\n\t\t\tcuerpoXML += \"</DetalleNoExenta></NoExenta>\";\n\t\t}\n   }\n   cuerpoXML += \"</Sujeta></DesgloseFactura></TipoDesglose>\";\n   \n   //Agregamos la HuellaTicketbai\n   cuerpoXML += \"</Factura><HuellaTBAI>\";\n   //Si queremos agregar el encadenamiento\n   /*cuerpoXML += \"<HuellaTBAI>\";\n\t\t<EncadenamientoFacturaAnterior>\n\t\t\t<SerieFacturaAnterior>Serie anterior</SerieFacturaAnterior>\n\t\t\t<NumFacturaAnterior>numero de factura anterior</NumFacturaAnterior>\n\t\t\t<FechaExpedicionFacturaAnterior>dd-MM-yyyy</FechaExpedicionFacturaAnterior>\t\t\n\t\t\t<SignatureValueFirmaFacturaAnterior>Aqui va el SignatureValue anterior con un maximo de 100</SignatureValueFirmaFacturaAnterior>\n\t\t </EncadenamientoFacturaAnterior>\n\t*/\n   //Agregamos la identificacion del software\n   cuerpoXML += \"<Software><LicenciaTBAI>TBAIGIPRE00000000746</LicenciaTBAI><EntidadDesarrolladora><NIF>19134990W</NIF></EntidadDesarrolladora><Nombre>Velneo vERP</Nombre><Version>32.0</Version></Software><NumSerieDispositivo>0000000</NumSerieDispositivo>\";\n   cuerpoXML += \"</HuellaTBAI></T:TicketBai>\";\n   \n   return cuerpoXML;\n}",
				"VER_ULT_ACT": "32.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "DIS-INF-VAL-BAL-SIT",
				"NAME": "Validación de cuentas del balance de situación",
				"SCR": "var pgc_des       = \"100\";\nvar pgc_has       = \"599999\";\nvar ctaToExclude  = \"129\"\n\nvalidarDesign();",
				"VER_ULT_ACT": "28.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "DIS-INF-VAL",
				"NAME": "Validación de cuentas del diseñador de informes",
				"SCR": "/*\n * --------------------------\n * Script de validación de diseñador de informes\n * Comprueba sí en el diseñador de informes estan todas las cuentas de mayor necesarias\n * 15/11/2020\n * --------------------------\n*/\n\n// Importamos clases de uso general\nimportClass(\"VProcess\");\n\n// Asignamos valor a las variables\nvar tablaId         = theRoot.varToString(\"FIC_ID\");\nvar errMsg          = \"\";\n\nfunction validarDesign()\n{\n// Leemos los registros de las cuentas de mayor de PGC\nvar listaPgc        = new VRegisterList(theRoot);\nlistaPgc.setTable(\"verp_3_dat/PGC_C\");\n\nvar procesoCargaPgc = new VProcess(theRoot);\nprocesoCargaPgc.setProcess(\"verp_3_app/PGC_C_DIS_INF\");\nprocesoCargaPgc.setVar(\"PGC_DES\",pgc_des);\nprocesoCargaPgc.setVar(\"PGC_HAS\",pgc_has);\nprocesoCargaPgc.setVar(\"CTA_NO\",ctaToExclude);\n\nif (procesoCargaPgc.exec())\n{\n  listaPgc.append(procesoCargaPgc.result());\n}\n\n// Leemos el fichero cabecera del diseño del informe\nvar registroDisInf = new VRegister(theRoot);\nregistroDisInf.setTable(\"verp_3_dat/DIS_INF_C\");\nregistroDisInf.readRegister(\"ID\", [tablaId], VRegister.SearchThis);\n\n// Leemos los campos (plurales) del diseñador de informes\nif (registroDisInf)\n{\n  listaDisInf    = registroDisInf.loadPlurals(\"DIS_INF_C_DIS_INF_NIV_1\");\n  listaDisInfCal = listaDisInf.loadPlurals(\"DIS_INF_CAL_C_DIS_INF\");\n  listaPgcInfCal = listaDisInfCal.loadMasters(\"PGC\");\n};\n\n// Quitamos de la lista de cuentas de mayor las que están en el diseñador\nlistaPgc.remove(listaPgcInfCal);\n\n// Generamos lista de errores, sí existen\nif (listaPgc.size() > 0)\n{\n  errMsg       += listaPgc.size() + \" Cuentas que no están en el Diseño\"+\"\\n\"; \n  var lista    = new VRegisterList(theRoot);\n  vista        = theMainWindow.addDataView(\"14\",\"verp_3_app/PGC_C_SEL\", listaPgc);\n  vista.setTitle(\"Cuentas que no están en el Diseño\");\n}\n\n// Recuperamos la lista del plan de cuentas para volver a cruzarla\nif (procesoCargaPgc.exec())\n{\n  listaPgc.append(procesoCargaPgc.result());\n}\n\n// Quitamos de la lista de cuentas del diseñador las que están en el pgc\nlistaPgcInfCal.remove(listaPgc);\n\n// Generamos lista de errores, sí existen\nif (listaPgcInfCal.size() > 0)\n {\n   errMsg       += listaPgcInfCal.size() + \" Cuentas que no deben estar en el Diseño\"+\"\\n\";\n   var lista = new VRegisterList(theRoot);\n   vista = theMainWindow.addDataView(\"14\",\"verp_3_app/PGC_C_SEL\", listaPgcInfCal);\n   vista.setTitle(\"Cuentas que no deben estar en el Diseño\");\n  }\n\n// Devolvemos el texro del error sí existe\nerrMsg = errMsg.slice(0,-1);\ntheRoot.setVar( \"ERR_INF\", errMsg);\n\n}\n",
				"VER_ULT_ACT": "28.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "DIS-INF-VAL-CTA-PYG",
				"NAME": "Validación de cuentas de la cuenta de pérdidas y ganancias",
				"SCR": "var pgc_des       = \"600\";\nvar pgc_has       = \"799999\";\nvar ctaToExclude  = \"\"\n\nvalidarDesign();",
				"VER_ULT_ACT": "28.0",
				"OFF": false,
				"ID_SCR": ""
			},
			{
				"ID": "GET-ETQ",
				"NAME": "Valor de la etiqueta",
				"SCR": "// -------------------------------------------------------------------------------\n// Devuelve el valor de una etiqueta\n//\n// 08-11-2016 - Revisión 20.0\n// 15-01-2017 - Revisión M.B. (Corrección campos fechas captura de datos)\n// -------------------------------------------------------------------------------\n\n(function getEtiqueta()\n{\n    // Preparamos la variables de retorno y leemos el registro de la etiqueta\n    var valorEtiqueta = \"\";\n    var registroEtiqueta = new VRegister(theRoot);\n    registroEtiqueta.setTable(\"verp_3_dat/FIC_REG_W\");\n\n    // Leemos el registro de la etiqueta\n    registroEtiqueta.readRegister(\"FIC_ETQ\", [ficId, parametros], VRegister.SearchThis);\n    if (registroEtiqueta)\n    {\n        // En función del tipo de campo devolvemos el valor numérico o alfabético\n        var tipoCampo = registroEtiqueta.fieldToString(\"PLF.PLF_TIP_CAM\");\n        var nameCampo = registroEtiqueta.fieldToString(\"PLF.NAME\");\n\n        // N=Numérico sin signo, S=Númerico con signo\n        if ((tipoCampo == 'N') || (tipoCampo == 'S'))\n            {\n               valorEtiqueta = registroEtiqueta.fieldToDouble(\"VAL_CAL\");\n            }\n        else{\n               if (tipoCampo == 'D')\n                   {\n                     var fchEti  = new Date(registroEtiqueta.fieldToDate(\"FCH_CAL\"));\n                     fchEti      = convertirFecha(fchEti, \"aaaa/mm/dd\");\n                   }\n               else\n                   {\n                     valorEtiqueta = registroEtiqueta.fieldToString(\"TXT_CAL\");\n                   }\n             }\n    };\n\n    // Modificamos el valor del registro de fichero en curso\n    var tipoCampo = registroFicReg.fieldToString(\"PLF.PLF_TIP_CAM\");\n    switch(tipoCampo)\n    {\n        case \"N\":\n        case \"S\":\n            registroFicReg.setField(\"VAL_CAL\", valorEtiqueta);\n            break;\n\n        case \"A\":\n        case \"F\":\n            registroFicReg.setField(\"TXT_CAL\", valorEtiqueta);\n            break;\n        case \"D\":\n            registroFicReg.setField(\"FCH_CAL\", fchEti);\n            break;\n    };\n\n    // Guardamos el valor del registro de fichero\n    registroFicReg.modifyRegister();\n})();",
				"VER_ULT_ACT": "20.2",
				"OFF": false,
				"ID_SCR": "GET-ETQ"
			}
		]
	}
]